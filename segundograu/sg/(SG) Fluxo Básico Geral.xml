<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Fluxo Básico Geral">
    <description><![CDATA[Código do fluxo: SG_FBG

Descrição: Fluxo básico geral de entrada dos processos.

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Fluxo Básico Geral">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:-1')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(SG) Tem pedido de urgência?" name="(SG) Tem pedido de urgência?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.temUrgencia() == true ? '(SG) Preparação de decisão de urgência inicial' : '(SG) Preparação de despacho inicial'}" name="(SG) Tem pedido de urgência?">
        <transition to="(SG) Preparação de decisão de urgência inicial" name="(SG) Preparação de decisão de urgência inicial"/>
        <transition to="(SG) Preparação de despacho inicial" name="(SG) Preparação de despacho inicial"/>
    </decision>
    <process-state name="(SG) Preparação de decisão de urgência inicial">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_urgencia_inicial', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_urgencia_inicial')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de despacho inicial">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho_inicial', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho_inicial')}"/>
        </event>
    </process-state>
    <task-node end-tasks="true" name="(SG) Secretaria - ANALISAR">
        <task name="(SG) Secretaria - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="label_informacao" mapped-name="textAlert:label_informacao" access="read,write"/>
                <variable name="sg_fbg_apensar_desapensar" mapped-name="sim_nao:sg_fbg_apensar_desapensar" access="read,write"/>
                <variable name="sg_fbg_certificar_decurso_prazo" mapped-name="sim_nao:sg_fbg_certificar_decurso_prazo" access="read,write"/>
                <variable name="sg_fbg_certificar_transito_julgado" mapped-name="sim_nao:sg_fbg_certificar_transito_julgado" access="read,write"/>
                <variable name="sg_fbg_intimar_citar" mapped-name="sim_nao:sg_fbg_intimar_citar" access="read,write"/>
                <variable name="sg_fbg_intimar_citar_mp" mapped-name="sim_nao:sg_fbg_intimar_citar_mp" access="read,write"/>
                <variable name="sg_fbg_expedir_carta" mapped-name="sim_nao:sg_fbg_expedir_carta" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: Ato proferido
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: label_informacao
   Label: Marque a(s) opção(ões) de cumprimento abaixo, em seguida, clique em "Próxima ação: 01 - Prosseguir nas tarefa(s) selecionada(s)". Ou se preferir, deixe as opções de cumprimento desmarcadas e escolha a "Próxima ação" desejada.
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

3. Variável: sg_fbg_apensar_desapensar
   Label: Apensar / desapensar
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

4. Variável: sg_fbg_certificar_decurso_prazo
   Label: Certificar decurso de prazo
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

5. Variável: sg_fbg_certificar_transito_julgado
   Label: Certificar trânsito em julgado
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

6. Variável: sg_fbg_intimar_citar
   Label: Intimar ou citar via sistema, correios ou edital
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

7. Variável: sg_fbg_intimar_citar_mp
   Label: Intimar ou citar Ministério Público
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox

8. Variável: sg_fbg_expedir_carta
   Label: Expedir carta de ordem, precatória e/ou rogatória
   Escrita: Sim
   Obrig. Não
   Tipo: Checkbox]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Fluxo Básico Geral" name="Nó de Desvio - (SG) Fluxo Básico Geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Cumprimento de decisão via análise da secretaria" name="01 - Prosseguir nas tarefa(s) selecionada(s)"/>
        <transition to="(SG) Preparação de decisão genérica" name="02 - Enviar concluso para decisão"/>
        <transition to="(SG) Preparação de decisão de urgência" name="03 - Enviar concluso para decisão de urgência"/>
        <transition to="(SG) Preparação de decisão de embargos de declaração" name="04 - Enviar concluso para decisão de embargos de declaração"/>
        <transition to="(SG) Preparação de decisão de agravo regimental ou interno" name="05 - Enviar concluso para decisão de agravo regimental ou interno"/>
        <transition to="(SG) Preparação de despacho genérico" name="06 - Enviar concluso para despacho"/>
        <transition to="(SG) Controlar suspensão de processo" name="07 - Suspender o processo"/>
        <transition to="(SG) Preparação de redistribuição" name="08 - Redistribuir"/>
        <transition to="(SG) Preparação para arquivamento" name="09 - Arquivar o processo"/>
        <transition to="(SG) Preparação de remessa para instância superior" name="10 - Remeter para instância superior"/>
        <transition to="(SG) Preparação de remessa para o primeiro grau" name="11 - Remeter para o primeiro grau"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_apensar_desapensar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_decurso_prazo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_certificar_transito_julgado')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg_fbg_intimar_citar_mp')}"/>
        </event>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <process-state name="(SG) Cumprimento de decisão via análise da secretaria">
        <sub-process name="(SG) Cumprimento de decisão" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação de decisão genérica">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_generica', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_generica')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de urgência">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_urgencia', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_urgencia')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de embargos de declaração">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_embargos_declaracao', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_embargos_declaracao')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de decisão de agravo regimental ou interno">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_agravo_regimental_interno', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_agravo_regimental_interno')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de despacho genérico">
        <sub-process name="(SG) Preparar Ato Judicial" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:despacho_generico', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:despacho_generico')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de redistribuição">
        <sub-process name="(SG) Redistribuição" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Controlar suspensão de processo">
        <sub-process name="(SG) Controle de suspensão" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação para arquivamento">
        <sub-process name="(SG) Arquivamento" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(SG) Preparação de remessa para instância superior">
        <sub-process name="(SG) Remessa para outra instância" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:reminst:remessa_instancia_superior', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:reminst:remessa_instancia_superior')}"/>
        </event>
    </process-state>
    <process-state name="(SG) Preparação de remessa para o primeiro grau">
        <sub-process name="(SG) Remessa para outra instância" binding="late"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:reminst:remessa_primeiro_grau', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:reminst:remessa_primeiro_grau')}"/>
        </event>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Fluxo Básico Geral">
        <task name="Nó de Desvio - (SG) Fluxo Básico Geral" swimlane="Nó de Desvio - (SG) Fluxo Básico Geral"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Secretaria - ANALISAR" name="(SG) Secretaria - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
