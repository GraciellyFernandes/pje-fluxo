<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Cancelamento da distribuição">
    <description><![CDATA[Código do fluxo: SG_CANDIST

Descrição: Fluxo responsável pelo cancelamento da distribuição de processos.

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Cancelamento da distribuição">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(SG) ~Cancelamento da distribuição - CONFIRMAR" name="(SG) ~Cancelamento da distribuição - CONFIRMAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) ~Cancelamento da distribuição - CONFIRMAR">
        <task name="(SG) ~Cancelamento da distribuição - CONFIRMAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1   
   Label: ATENÇÃO! Ao selecionar a opção "Confirmar cancelamento da distribuição", o processo não poderá mais ser movimentado.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (SG) Cancelamento da distribuição" name="Nó de Desvio - (SG) Cancelamento da distribuição">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Lançar movimento de cancelamento da distribuição" name="Confirmar cancelamento da distribuição"/>
        <transition to="(SG) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <node name="(SG) Lançar movimento de cancelamento da distribuição">
        <transition to="(SG) ~Cancelamento da distribuição confirmado" name="(SG) ~Cancelamento da distribuição confirmado"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(488).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.removerSituacao('jus:andamento')}"/>
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:arquivado')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(SG) ~Cancelamento da distribuição confirmado">
        <task name="(SG) ~Cancelamento da distribuição confirmado" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1   
   Label: O processo teve o cancelamento da sua distribuição efetuada, não poderá mais ser movimentado.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (SG) Cancelamento da distribuição" name="Nó de Desvio - (SG) Cancelamento da distribuição">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Preparação de decisão sobre reativação" name="Enviar concluso sobre reativação"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Preparação de decisão sobre reativação">
        <sub-process name="(SG) Preparar ato judicial" binding="late"/>
        <transition to="(SG) Manter cancelamento da distribuição?" name="(SG) Manter cancelamento da distribuição?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:paj:decisao_reativacao', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:paj:decisao_reativacao')}"/>
        </event>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:arq:manter_arquivado') == true ? '(SG) ~Cancelamento da distribuição confirmado' : '(SG) Lançar movimento de reativação'}" name="(SG) Manter cancelamento da distribuição?">
        <transition to="(SG) Lançar movimento de reativação" name="(SG) Lançar movimento de reativação"/>
        <transition to="(SG) ~Cancelamento da distribuição confirmado" name="(SG) ~Cancelamento da distribuição confirmado"/>
    </decision>
    <node name="(SG) Lançar movimento de reativação">
        <transition to="(SG) Apagar variáveis do fluxo" name="(SG) Apagar variáveis do fluxo"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(849).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.removerSituacao('jus:arquivado')}"/>
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:andamento')}"/>
        </event>
    </node>
    <node name="(SG) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:arq:manter_arquivado')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Cancelamento da distribuição">
        <task name="Nó de Desvio - (SG) Cancelamento da distribuição" swimlane="Nó de Desvio - (SG) Cancelamento da distribuição"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) ~Cancelamento da distribuição - CONFIRMAR" name="(SG) ~Cancelamento da distribuição - CONFIRMAR"/>
        <transition to="(SG) ~Cancelamento da distribuição confirmado" name="(SG) ~Cancelamento da distribuição confirmado"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
