<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Decisão colegiada como não relator">
    <description><![CDATA[Código do fluxo: SG_DECCOLNREL

Descrição: Fluxo destinado a preparação de decisões colegiadas como não relator do processo.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Decisão colegiada como não relator">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,599:1469')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('599:1469,600:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="(SG) Voto [não relator] - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Voto [não relator] - MINUTAR">
        <task name="(SG) Voto [não relator] - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: Apreciação colegiada por não relator
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="Encaminhar para revisão da minuta"/>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="Encaminhar ao magistrado"/>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Cancelar e sair da tarefa')}"/>
            <action expression="#{taskInstance.setVariable('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{taskInstance.deleteVariableLocally('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - CONFIRMAR">
        <task name="(SG) Voto [não relator] - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="Encaminhar ao magistrado"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Encaminhar para minuta"/>
        <event type="task-create">
            <action expression="#{taskInstance.setVariable('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{taskInstance.deleteVariableLocally('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - VALIDAR">
        <task name="(SG) Voto [não relator] - VALIDAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: Apreciação colegiada por não relator
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Devolver para minuta"/>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="Devolver para revisão da minuta"/>
        <transition to="(SG) Houve julgamento em painel?" name="(SG) Houve julgamento em painel?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Houve julgamento em painel?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis','magistrado,pje:magistrado')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{taskInstance.setVariable('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:flx:votacaoVogal:transicaoAutomatica:papeis')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{'julgado' == processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') ? '(SG) Gabinete do relator foi o vencendor?' : '(SG) Sessão de julgamento [outros julgadores] - AGUARDAR'}" name="(SG) Houve julgamento em painel?">
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR"/>
        <transition to="(SG) Gabinete do relator foi o vencendor?" name="(SG) Gabinete do relator foi o vencendor?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR">
        <task name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" swimlane="Assessoria"/>
        <transition to="(SG) Houve julgamento?" name="(SG) Houve julgamento?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="Retornar para minuta do voto [não relator]"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Houve julgamento?')}"/>
            <action expression="#{taskInstance.setVariable('pje:flx:votacaoVogal:exp:manipulaLiberacao', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('cnj:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{taskInstance.deleteVariableLocally('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{'julgado' == processInstance.contextInstance.getVariable('pje:fluxo:colegiado:situacao') ? 'Teste orgão vencedor' : 'Aguardando a sessão (outros julgadores)'}" name="(SG) Houve julgamento?">
        <transition to="(SG) Gabinete do relator foi o vencendor?" name="(SG) Gabinete do relator foi o vencendor?"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR"/>
    </decision>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') and tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') != tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador ? 'Término' : '(SG) Existe conteúdo no voto?'}" name="(SG) Gabinete do relator foi o vencendor?">
        <transition to="Término" name="Término"/>
        <transition to="(SG) Existe conteúdo no voto?" name="(SG) Existe conteúdo no voto?"/>
    </decision>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:julgamento:id') and not empty sessaoProcessoDocumentoVotoManager.recuperarVoto(sessaoPautaProcessoTrfManager.findById(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:julgamento:id')).sessao, tramitacaoProcessualService.recuperaProcesso(),orgaoJulgadorManager.findById(processoInstanceManager.findById(processInstance.id).orgaoJulgador)).processoDocumento ? '(SG) Voto [não relator] - ASSINAR' : 'Término'}" name="(SG) Existe conteúdo no voto?">
        <transition to="Término" name="Término"/>
        <transition to="(SG) Voto [não relator] - ASSINAR" name="(SG) Voto [não relator] - ASSINAR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Voto [não relator] - ASSINAR">
        <task name="(SG) Voto [não relator] - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_votacaoVogal
   Label: Apreciação colegiada por não relator
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="Aguardar sessão de julgamento"/>
        <transition to="Nó de Desvio - (SG) Decisão colegiada como não relator" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
            <condition expression="#{true}"/>
        </transition>
    </task-node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:flx:votacaoVogal:exp:manipulaLiberacao')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Decisão colegiada como não relator">
        <task name="Nó de Desvio - (SG) Decisão colegiada como não relator" swimlane="Nó de Desvio - (SG) Decisão colegiada como não relator"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Voto [não relator] - MINUTAR" name="(SG) Voto [não relator] - MINUTAR"/>
        <transition to="(SG) Voto [não relator] - CONFIRMAR" name="(SG) Voto [não relator] - CONFIRMAR"/>
        <transition to="(SG) Voto [não relator] - VALIDAR" name="(SG) Voto [não relator] - VALIDAR"/>
        <transition to="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR" name="(SG) Sessão de julgamento [outros julgadores] - AGUARDAR"/>
        <transition to="(SG) Voto [não relator] - ASSINAR" name="(SG) Voto [não relator] - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
