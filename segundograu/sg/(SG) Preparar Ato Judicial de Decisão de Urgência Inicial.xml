<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
    <description><![CDATA[Código do fluxo: SG_PAJ_DEC_URG_INI

Descrição: Fluxo destinado ao preparo de atos judiciais de decisão de urgência inicial.

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado
Magistrado  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:-1')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - MINUTAR">
        <task name="(SG) Concluso para decisão de urgência inicial - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de tarefa*

1. Tipo do evento: Sair da tarefa
   Agrupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR">
        <task name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="Retornar para minuta"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência inicial - ASSINAR">
        <task name="(SG) Concluso para decisão de urgência inicial - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial">
        <task name="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial" swimlane="Nó de Desvio - (SG) Preparar Ato Judicial de Decisão de Urgência Inicial"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - MINUTAR" name="(SG) Concluso para decisão de urgência inicial - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - ASSINAR" name="(SG) Concluso para decisão de urgência inicial - ASSINAR"/>
        <transition to="(SG) Concluso para decisão de urgência inicial - CONFIRMAR" name="(SG) Concluso para decisão de urgência inicial - CONFIRMAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS -->
    <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:documento:tipo:minuta:ids','63')}"/> 
</process-definition>
