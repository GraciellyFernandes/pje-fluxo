<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar Ato de Comunicação">
    <description><![CDATA[Código do fluxo: SG_PAC

Descrição: Preparar ato de comunicação como intimações e citações via correios, sistema e edital.

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:-1')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="É citação ou intimação genérica?" name="É citação ou intimação genérica?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:pac:intimar_citar') == true ? '(SG) Intimação ou citação - EXPEDIR' : '(SG) É citação ou intimação ao MP?'}" name="É citação ou intimação genérica?">
        <transition to="(SG) Intimação ou citação - EXPEDIR" name="(SG) Intimação ou citação - EXPEDIR"/>
        <transition to="(SG) É citação ou intimação ao MP?" name="(SG) É citação ou intimação ao MP?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Intimação ou citação - EXPEDIR">
        <task name="(SG) Intimação ou citação - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Expedir intimação ou citação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato de Comunicação" name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Separação em preparar ato de comunicação" name="(SG) Separação em preparar ato de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(SG) Separação em preparar ato de comunicação')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,65,174')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,D,S')}"/>
        </event>
    </task-node>
    <fork name="(SG) Separação em preparar ato de comunicação">
        <transition to="(SG) É edital?" name="(SG) É edital?"/>
        <transition to="(SG) É sistema?" name="(SG) É sistema?"/>
        <transition to="(SG) É pessoalmente?" name="(SG) É pessoalmente?"/>
        <transition to="(SG) É correios?" name="(SG) É correios?"/>
    </fork>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'C' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Registrar movimento de expediçao de AR' : '(SG) Junção em preparar ato de comunicação'}" name="(SG) É correios?">
        <transition to="(SG) Junção em preparar ato de comunicação" name="(SG) Junção em preparar ato de comunicação"/>
        <transition to="(SG) Registrar movimento de expediçao de AR" name="(SG) Registrar movimento de expediçao de AR"/>
    </decision>
    <node name="(SG) Registrar movimento de expediçao de AR">
        <description><![CDATA[#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('C', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(74).lancarMovimento()}')}]]></description>
        <transition to=" (SG) Intimação ou citação via correios - IMPRIMIR" name=" (SG) Intimação ou citação via correios - IMPRIMIR"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('C', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(74).lancarMovimento()}')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name=" (SG) Intimação ou citação via correios - IMPRIMIR">
        <task name=" (SG) Intimação ou citação via correios - IMPRIMIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_expedientes_correios" mapped-name="frame:Processo_Fluxo_expedientes_correios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_expedientes_correios
   Label: Imprimir correspondências
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato de Comunicação" name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Controle de prazo de intimação ou citação expedida" name="Finalizar e sair da tarefa"/>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{taskInstanceUtil.deleteVariableLocally('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'S' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Registrar ciência após expedição' : '(SG) Junção em preparar ato de comunicação'}" name="(SG) É pessoalmente?">
        <transition to="(SG) Registrar ciência após expedição" name="(SG) Registrar ciência após expedição"/>
        <transition to="(SG) Junção em preparar ato de comunicação" name="(SG) Junção em preparar ato de comunicação"/>
    </decision>
    <node name="(SG) Registrar ciência após expedição">
        <transition to="(SG) Lançar movimento de expedição de outros documentos" name="(SG) Lançar movimento de expedição de outros documentos"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.registrarCienciaExpedientePessoal()}"/>
        </event>
    </node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'E' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Lançar movimento de expedição de outros documentos' : '(SG) Junção em preparar ato de comunicação'}" name="(SG) É sistema?">
        <transition to="(SG) Lançar movimento de expedição de outros documentos" name="(SG) Lançar movimento de expedição de outros documentos"/>
        <transition to="(SG) Junção em preparar ato de comunicação" name="(SG) Junção em preparar ato de comunicação"/>
    </decision>
    <node name="(SG) Lançar movimento de expedição de outros documentos">
        <transition to="(SG) Controle de prazo de intimação ou citação expedida" name="(SG) Controle de prazo de intimação ou citação expedida"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'D' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(SG) Registrar ciência após expedição' : '(SG) Junção em preparar ato de comunicação'}" name="(SG) É edital?">
        <transition to="(SG) Registrar ciência após expedição" name="(SG) Registrar ciência após expedição"/>
        <transition to="(SG) Junção em preparar ato de comunicação" name="(SG) Junção em preparar ato de comunicação"/>
    </decision>
    <process-state name="(SG) Controle de prazo de intimação ou citação expedida">
        <sub-process name="(SG) Controle de prazos" binding="late"/>
        <transition to="(SG) Junção em preparar ato de comunicação" name="(SG) Junção em preparar ato de comunicação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:contprazos:intimacao_generica', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:contprazos:intimacao_generica')}"/>
        </event>
    </process-state>
    <join name="(SG) Junção em preparar ato de comunicação">
        <transition to="Término" name="Término"/>
    </join>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:pac:intimar_citar_mp') == true ? '(SG) Intimação ou citação ao MP - EXPEDIR' : 'Término'}" name="(SG) É citação ou intimação ao MP?">
        <transition to="(SG) Intimação ou citação ao MP - EXPEDIR" name="(SG) Intimação ou citação ao MP - EXPEDIR"/>
        <transition to="Término" name="Término"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Intimação ou citação ao MP - EXPEDIR">
        <task name="(SG) Intimação ou citação ao MP - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="labelComboDocumento" mapped-name="textAlert:labelComboDocumento" access="read,write"/>
                <variable name="comboDocumento" mapped-name="combo_objetos:comboDocumento" access="read,write"/>
                <variable name="label_informacao" mapped-name="textAlert:label_informacao" access="read,write"/>
                <variable name="prazoIntimacao" mapped-name="number:prazoIntimacao" access="read,write,required"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: labelComboDocumento
   Label: Selecione o ato abaixo que deseja intimar
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: comboDocumento
   Label: #{processoDocumentoManager.recuperaDocumentosJuntados(tramitacaoProcessualService.recuperaProcesso())}
   Escrita: Sim
   Obrig.: Não
   Tipo: Combo de objetos

3. Variável: label_informacao
   Label: #{tramitacaoProcessualService.recuperaVariavel('pje:atoProferido') == null ? 'ATENÇÃO! É NECESSÁRIO INFORMAR O ATO QUE DESEJA INTIMAR!' : ''}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

4. Variável: prazoIntimacao
   Label: Prazo para manifestação (em dias - 0 para sem prazo)
   Escrita: Sim
   Obrig.: Sim
   Tipo: Numérico]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato de Comunicação" name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Último ato foi selecionado?" name="Encaminhar para confirmação"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('atoProferidoOriginal', tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
            <action expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('number:prazoIntimacao', 0)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:atoProferido', tramitacaoProcessualService.recuperaVariavelTarefa('combo_objetos:comboDocumento').idProcessoDocumento)}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:atoProferido') == null ? '(SG) Intimação ou citação ao MP - EXPEDIR' : '(SG) Intimação ou citação ao MP - CONFIRMAR'}" name="(SG) Último ato foi selecionado?">
        <transition to="(SG) Intimação ou citação ao MP - EXPEDIR" name="(SG) Intimação ou citação ao MP - EXPEDIR"/>
        <transition to="(SG) Intimação ou citação ao MP - CONFIRMAR" name="(SG) Intimação ou citação ao MP - CONFIRMAR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Intimação ou citação ao MP - CONFIRMAR">
        <task name="(SG) Intimação ou citação ao MP - CONFIRMAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="labelDestinatario" mapped-name="textAlert:labelDestinatario" access="read,write"/>
                <variable name="labelPrazo" mapped-name="textAlert:labelPrazo" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: Ato
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: label_informacao
   Label: Prazo: Destinatário: MINISTÉRIO PÚBLICO DO ESTADO DO RIO GRANDE DO NORTE
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

3. Variável: label_informacao
   Label: Prazo: Prazo: #{tramitacaoProcessualService.recuperaVariavel('prazoIntimacao') == 0 ? '(sem prazo)' : tramitacaoProcessualService.recuperaVariavel('prazoIntimacao')}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(SG) Lançar movimento de expedição de documentos ao MP" name="Confirmar intimação ou citação"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato de Comunicação" name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Intimação ou citação ao MP - EXPEDIR" name="Retornar para expedição"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{taskInstanceUtil.deleteVariableLocally('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <node name="(SG) Lançar movimento de expedição de documentos ao MP">
        <description><![CDATA[#{atoComunicacaoService.intimarDestinatarioEletronicamente(tramitacaoProcessualService.recuperaProcess().id_processo, 9999, 'D', tramitacaoProcessualService.recuperaVariavel('prazoIntimacao'), tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}]]></description>
        <transition to="(SG) Controle de prazo de intimação ou citação ao MP expedida" name="(SG) Controle de prazo de intimação ou citação ao MP expedida"/>
        <event type="node-enter">
            <action expression="#{atoComunicacaoService.intimarDestinatarioEletronicamente(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 4266, tramitacaoProcessualService.recuperaVariavel('prazoIntimacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('prazoIntimacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('prazoIntimacao'), tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
        </event>
    </node>
    <process-state name="(SG) Controle de prazo de intimação ou citação ao MP expedida">
        <sub-process name="(SG) Controle de prazos do MP" binding="late"/>
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:contprazos:intimacao_mp', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:contprazos:intimacao_mp')}"/>
        </event>
    </process-state>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{empty tramitacaoProcessualService.recuperaVariavel('atoProferidoOriginal') ? '' : tramitacaoProcessualService.gravaVariavel('pje:atoProferido', tramitacaoProcessualService.recuperaVariavel('atoProferidoOriginal'))}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar Ato de Comunicação">
        <task name="Nó de Desvio - (SG) Preparar Ato de Comunicação" swimlane="Nó de Desvio - (SG) Preparar Ato de Comunicação"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Intimação ou citação - EXPEDIR" name="(SG) Intimação ou citação - EXPEDIR"/>
        <transition to="(SG) Intimação ou citação ao MP - EXPEDIR" name="(SG) Intimação ou citação ao MP - EXPEDIR"/>
        <transition to=" (SG) Intimação ou citação via correios - IMPRIMIR" name=" (SG) Intimação ou citação via correios - IMPRIMIR"/>
        <transition to="(SG) Intimação ou citação ao MP - CONFIRMAR" name="(SG) Intimação ou citação ao MP - CONFIRMAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
