<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Despachados">
    <description><![CDATA[Código do fluxo: SG_DESP

Descrição: Controle dos processos despachados (oriundos do gabinete).

Raia        Localização              Papel
Secretaria  Secretaria Segundo Grau  Chefe de Secretaria
Secretaria  Secretaria Segundo Grau  Servidor Geral]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Despachados">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,602:5483')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(SG) É despachado por ato ordinatório?" name="(SG) É despachado por ato ordinatório?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:eaog:assinou_ato_ordinatorio') == true ? '(SG) Despachado por ato ordinatório - ANALISAR' : '(SG) É despachado sobre embargos de declaração?'}" name="(SG) É despachado por ato ordinatório?">
        <transition to="(SG) Despachado por ato ordinatório - ANALISAR" name="(SG) Despachado por ato ordinatório - ANALISAR"/>
        <transition to="(SG) É despachado sobre embargos de declaração?" name="(SG) É despachado sobre embargos de declaração?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado por ato ordinatório - ANALISAR">
        <task name="(SG) Despachado por ato ordinatório - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Cumprir ato ordinatório do gabinete"/>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_embargo_declaracao') == true ? '(SG) Despachado sobre embargos de declaração - ANALISAR' : '(SG) É despachado sobre encerramento de suspensão?'}" name="(SG) É despachado sobre embargos de declaração?">
        <transition to="(SG) Despachado sobre embargos de declaração - ANALISAR" name="(SG) Despachado sobre embargos de declaração - ANALISAR"/>
        <transition to="(SG) É despachado sobre encerramento de suspensão?" name="(SG) É despachado sobre encerramento de suspensão?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre embargos de declaração - ANALISAR">
        <task name="(SG) Despachado sobre embargos de declaração - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cumprir determinações"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_encerramento_suspensao') == true ? '(SG) Despachado sobre encerramento de suspensão - ANALISAR' : '(SG) É despachado sobre reativação?'}" name="(SG) É despachado sobre encerramento de suspensão?">
        <transition to="(SG) Despachado sobre encerramento de suspensão - ANALISAR" name="(SG) Despachado sobre encerramento de suspensão - ANALISAR"/>
        <transition to="(SG) É despachado sobre reativação?" name="(SG) É despachado sobre reativação?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre encerramento de suspensão - ANALISAR">
        <task name="(SG) Despachado sobre encerramento de suspensão - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

*Actions em transições que saem do nó*

1. Nó Destino: Término
   Nome: Manter processo suspenso
   Action: #{tramitacaoProcessualService.gravaVariavel('sg:consusp:manter_suspensao', true)}

2. Nó Destino: Término
   Nome: Encerrar suspensão do processo
   Action: #{tramitacaoProcessualService.gravaVariavel('sg:consusp:manter_suspensao', false)}]]></description>
        <transition to="Término" name="Manter processo suspenso">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:consusp:manter_suspensao', true)}"/>
        </transition>
        <transition to="Término" name="Encerrar suspensão do processo">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:consusp:manter_suspensao', false)}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_reativacao') == true ? '(SG) Despachado sobre reativação - ANALISAR' : '(SG) É despachado sobre agravo regimental ou interno?'}" name="(SG) É despachado sobre reativação?">
        <transition to="(SG) Despachado sobre reativação - ANALISAR" name="(SG) Despachado sobre reativação - ANALISAR"/>
        <transition to="(SG) É despachado sobre agravo regimental ou interno?" name="(SG) É despachado sobre agravo regimental ou interno?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre reativação - ANALISAR">
        <task name="(SG) Despachado sobre reativação - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

*Actions em transições que saem do nó*

1. Nó Destino: Término
   Nome: Manter processo arquivado
   Action: #{tramitacaoProcessualService.gravaVariavel('sg:arq:manter_arquivado', true)}

2. Nó Destino: Término
   Nome: Reativar processo
   Action: #{tramitacaoProcessualService.gravaVariavel('sg:arq:manter_arquivado', false)}]]></description>
        <transition to="Término" name="Manter processo arquivado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:arq:manter_arquivado', true)}"/>
        </transition>
        <transition to="Término" name="Reativar processo">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:arq:manter_arquivado', false)}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_agravo_regimental_interno') == true ? '(SG) Despachado sobre agravo regimental ou interno - ANALISAR' : '(SG) É despachado sobre cancelamento de voto?'}" name="(SG) É despachado sobre agravo regimental ou interno?">
        <transition to="(SG) Despachado sobre agravo regimental ou interno - ANALISAR" name="(SG) Despachado sobre agravo regimental ou interno - ANALISAR"/>
        <transition to="(SG) É despachado sobre cancelamento de voto?" name="(SG) É despachado sobre cancelamento de voto?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre agravo regimental ou interno - ANALISAR">
        <task name="(SG) Despachado sobre agravo regimental ou interno - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cumprir determinações"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_cancelamento_voto') == true ? '(SG) Despachado sobre cancelamento de voto' : '(SG) É despachado sobre agravo em REsp. ou RExt.?'}" name="(SG) É despachado sobre cancelamento de voto?">
        <transition to="(SG) Despachado sobre cancelamento de voto" name="(SG) Despachado sobre cancelamento de voto"/>
        <transition to="(SG) É despachado sobre agravo em REsp. ou RExt.?" name="(SG) É despachado sobre agravo em REsp. ou RExt.?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre cancelamento de voto">
        <task name="(SG) Despachado sobre cancelamento de voto" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Cumprir determinações"/>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:desp:despachado_agravo_resp_rext') == true ? '(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR' : 'Término'}" name="(SG) É despachado sobre agravo em REsp. ou RExt.?">
        <transition to="Término" name="Término"/>
        <transition to="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR" name="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR">
        <task name="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_visualizarDecisao
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentarEmLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Despachados" name="Nó de Desvio - (SG) Despachados">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cumprir determinações"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Despachados">
        <task name="Nó de Desvio - (SG) Despachados" swimlane="Nó de Desvio - (SG) Despachados"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Despachado sobre encerramento de suspensão - ANALISAR" name="(SG) Despachado sobre encerramento de suspensão - ANALISAR"/>
        <transition to="(SG) Despachado sobre reativação - ANALISAR" name="(SG) Despachado sobre reativação - ANALISAR"/>
        <transition to="(SG) Despachado sobre embargos de declaração - ANALISAR" name="(SG) Despachado sobre embargos de declaração - ANALISAR"/>
        <transition to="(SG) Despachado sobre agravo regimental ou interno - ANALISAR" name="(SG) Despachado sobre agravo regimental ou interno - ANALISAR"/>
        <transition to="(SG) Despachado por ato ordinatório - ANALISAR" name="(SG) Despachado por ato ordinatório - ANALISAR"/>
        <transition to="(SG) Despachado sobre cancelamento de voto" name="(SG) Despachado sobre cancelamento de voto"/>
        <transition to="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR" name="(SG) Despachado sobre agravo em REsp. ou RExt. - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
