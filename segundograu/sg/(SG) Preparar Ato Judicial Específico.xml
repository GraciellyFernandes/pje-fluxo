<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(SG) Preparar Ato Judicial Específico">
    <description><![CDATA[Código do fluxo: SG_PAJ_ESPECIFICO

Descrição: Fluxo destinado ao preparo de atos judiciais de decisões e despachos específicos..

Raia        Localização              Papel
Assessoria  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado
Magistrado  Assessoria Segundo Grau  Assessoria
            Gabinete Segundo Grau    Magistrado]]></description>
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('602:1338,599:1469')}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('600:5197,599:1469')}"/>
    </swimlane>
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(SG) Concluso para decisão de urgência?" name="(SG) Concluso para decisão de urgência?"/>
    </start-state>
    <!-- NODES -->
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:decisao_urgencia') == true ? '(SG) Concluso para decisão de urgência - MINUTAR' : '(SG) Concluso para decisão sobre encerramento da suspensão?'}" name="(SG) Concluso para decisão de urgência?">
        <transition to="(SG) Concluso para decisão de urgência - MINUTAR" name="(SG) Concluso para decisão de urgência - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre encerramento da suspensão?" name="(SG) Concluso para decisão sobre encerramento da suspensão?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência - MINUTAR">
        <task name="(SG) Concluso para decisão de urgência - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor
2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão de urgência - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Emissão de certidão sem efeito" name="Cancelar e emitir certidão de conclusão sem efeito"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência - CONFIRMAR">
        <task name="(SG) Concluso para decisão de urgência - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão de urgência - MINUTAR" name="Retornar para minuta"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de urgência - ASSINAR">
        <task name="(SG) Concluso para decisão de urgência - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de urgência - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão de urgência - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:decisao_encerramento_suspensao') == true ? '(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR' : '(SG) Concluso para decisão sobre reativação?'}" name="(SG) Concluso para decisão sobre encerramento da suspensão?">
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR" name="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre reativação?" name="(SG) Concluso para decisão sobre reativação?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR">
        <task name="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor
2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR">
        <task name="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR" name="Retornar para minuta"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR">
        <task name="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR" name="Retornar para minuta"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:decisao_reativacao') == true ? '(SG) Concluso para decisão sobre reativação - MINUTAR' : '(SG) Concluso para decisão sobre embargos de declaração?'}" name="(SG) Concluso para decisão sobre reativação?">
        <transition to="(SG) Concluso para decisão sobre reativação - MINUTAR" name="(SG) Concluso para decisão sobre reativação - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre embargos de declaração?" name="(SG) Concluso para decisão sobre embargos de declaração?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reativação - MINUTAR">
        <task name="(SG) Concluso para decisão sobre reativação - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor
2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reativação - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão sobre reativação - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reativação - CONFIRMAR">
        <task name="(SG) Concluso para decisão sobre reativação - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reativação - MINUTAR" name="Retornar para minuta"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão sobre reativação - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão sobre reativação - ASSINAR">
        <task name="(SG) Concluso para decisão sobre reativação - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão sobre reativação - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão sobre reativação - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:decisao_embargos_declaracao') == true ? '(SG) Concluso para decisão de embargos de declaração - MINUTAR' : '(SG) Concluso para decisão de agravo regimental ou interno?'}" name="(SG) Concluso para decisão sobre embargos de declaração?">
        <transition to="(SG) Concluso para decisão de embargos de declaração - MINUTAR" name="(SG) Concluso para decisão de embargos de declaração - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno?" name="(SG) Concluso para decisão de agravo regimental ou interno?"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de embargos de declaração - MINUTAR">
        <task name="(SG) Concluso para decisão de embargos de declaração - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor
2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão de embargos de declaração - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Emissão de certidão sem efeito" name="Cancelar e emitir certidão de conclusão sem efeito"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR">
        <task name="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão de embargos de declaração - MINUTAR" name="Retornar para minuta"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de embargos de declaração - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de embargos de declaração - ASSINAR">
        <task name="(SG) Concluso para decisão de embargos de declaração - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="(SG) Concluso para decisão de embargos de declaração - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:paj:decisao_agravo_regimental_interno') == true ? '(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR' : 'Término'}" name="(SG) Concluso para decisão de agravo regimental ou interno?">
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR" name="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR"/>
        <transition to="Término" name="Término"/>
    </decision>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR">
        <task name="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor
2. Variável: MinutarEmLote
   Label: Minutar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Agrupamento eventos: Magistrado]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR" name="Encaminhar para confirmação da minuta"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Emissão de certidão sem efeito" name="Cancelar e emitir certidão de conclusão sem efeito"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',63,64)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR">
        <task name="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR" swimlane="Assessoria">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Confirmar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR" name="Retornar para minuta"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR">
        <task name="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar minuta
   Escrita: Sim
   Obrig. Não
   Tipo: Frame
2. Variável: MovimentarEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote
3. Variável: AssinaturaEmLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (SG) Preparar Ato Judicial Específico" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR" name="Retornar para minuta"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR" name="Retornar para confirmação da minuta"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
        <event type="task-start">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','63,64')}"/>
        </event>
    </task-node>
    <process-state name="(SG) Emissão de certidão sem efeito">
        <sub-process name="(SG) Expedição de certidão de conclusão sem efeito" binding="late"/>
        <transition to="(SG) Cancelou a conclusão?" name="(SG) Cancelou a conclusão?"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:eccse:assinou_certidao_sem_efeito') == true ? 'Término' : '(SG) Concluso para decisão sobre encerramento da suspensão?'}" name="(SG) Cancelou a conclusão?">
        <transition to="(SG) Concluso para decisão sobre encerramento da suspensão?" name="(SG) Concluso para decisão sobre encerramento da suspensão?"/>
        <transition to="Término" name="Término"/>
    </decision>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (SG) Preparar Ato Judicial Específico">
        <task name="Nó de Desvio - (SG) Preparar Ato Judicial Específico" swimlane="Nó de Desvio - (SG) Preparar Ato Judicial Específico"/>
        <transition to="Término" name="Término"/>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR" name="(SG) Concluso para decisão sobre encerramento de suspensão - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR" name="(SG) Concluso para decisão sobre encerramento de suspensão - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR" name="(SG) Concluso para decisão sobre encerramento de suspensão - ASSINAR"/>
        <transition to="(SG) Concluso para decisão sobre reativação - MINUTAR" name="(SG) Concluso para decisão sobre reativação - MINUTAR"/>
        <transition to="(SG) Concluso para decisão sobre reativação - CONFIRMAR" name="(SG) Concluso para decisão sobre reativação - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão sobre reativação - ASSINAR" name="(SG) Concluso para decisão sobre reativação - ASSINAR"/>
        <transition to="(SG) Concluso para decisão de embargos de declaração - MINUTAR" name="(SG) Concluso para decisão de embargos de declaração - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR" name="(SG) Concluso para decisão de embargos de declaração - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão de embargos de declaração - ASSINAR" name="(SG) Concluso para decisão de embargos de declaração - ASSINAR"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR" name="(SG) Concluso para decisão de agravo regimental ou interno - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR" name="(SG) Concluso para decisão de agravo regimental ou interno - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR" name="(SG) Concluso para decisão de agravo regimental ou interno - ASSINAR"/>
        <transition to="(SG) Concluso para decisão de urgência - MINUTAR" name="(SG) Concluso para decisão de urgência - MINUTAR"/>
        <transition to="(SG) Concluso para decisão de urgência - CONFIRMAR" name="(SG) Concluso para decisão de urgência - CONFIRMAR"/>
        <transition to="(SG) Concluso para decisão de urgência - ASSINAR" name="(SG) Concluso para decisão de urgência - ASSINAR"/>
    </task-node>
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <!-- ACTIONS -->
</process-definition>
