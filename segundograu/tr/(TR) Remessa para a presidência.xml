<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TR) Remessa para a presidência">
    <description><![CDATA[..]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (TR) Remessa para a presidência">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,5:5197,8:1338')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Magistrado"/>
        <transition to="(TR) Enviar para a presidência" name="(TR) Enviar para a presidência"/>
    </start-state>  
    <!-- NODES -->
    <node name="(TR) Enviar para a presidência">
        <transition to="(TR) É decisão para presidência?" name="(TR) É decisão para presidência?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado == 2 ? tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino',2) : (tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado == 3 ? tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino',7) : tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino',9))}"/>
            <action expression="#{tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado == 2 ? tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino',2) : (tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado == 3 ? tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino',10) : tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino',9))}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino',tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
    </node>
    <decision expression="#{true == tramitacaoProcessualService.recuperaVariavel('tr:rempre:decisao_presidencia') ? '(TR) Lançar movimento concluso para decisão' : '(TR) É despacho para presidência?'}" name="(TR) É decisão para presidência?">
        <transition to="(TR) É despacho para presidência?" name="(TR) É despacho para presidência?"/>
        <transition to="(TR) Lançar movimento concluso para decisão" name="(TR) Lançar movimento concluso para decisão"/>
    </decision>
    <node name="(TR) Lançar movimento concluso para decisão">
        <transition to="(TR) Concluso para decisão da presidência" name="(TR) Concluso para decisão da presidência"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(51).comComplementoDeCodigo(3).doTipoDominio().preencherComElementoDeCodigo(6).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(TR) Concluso para decisão da presidência">
        <task name="(TR) Concluso para decisão da presidência" swimlane="Magistrado">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Remessa para a presidência" name="Nó de Desvio - (TR) Remessa para a presidência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Assinar decisão da presidência" name="Encaminhar para assinatura"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:documento:tipo:minuta:ids','63,64')}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TR) Assinar decisão da presidência">
        <task name="(TR) Assinar decisão da presidência" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
                <variable name="HomologarMovimentos" mapped-name="homologadorEventoTree:HomologarMovimentos" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Remessa para a presidência" name="Nó de Desvio - (TR) Remessa para a presidência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Concluso para decisão da presidência" name="Retornar para minuta"/>
        <transition to="(TR) Receber da presidência" name="(TR) Receber da presidência">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(TR) Receber da presidência')}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('Processo_Fluxo_revisarMinuta','63,64')}"/>
        </event>
    </task-node>
    <decision expression="#{true == tramitacaoProcessualService.recuperaVariavel('tr:rempre:despacho_presidencia') ? '(TR) Lançar movimento concluso para despacho' : '(TR) Receber da presidência'}" name="(TR) É despacho para presidência?">
        <transition to="(TR) Receber da presidência" name="(TR) Receber da presidência"/>
        <transition to="(TR) Lançar movimento concluso para despacho" name="(TR) Lançar movimento concluso para despacho"/>
    </decision>
    <node name="(TR) Lançar movimento concluso para despacho">
        <transition to="(TR) Concluso para despacho da presidência" name="(TR) Concluso para despacho da presidência"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(51).comComplementoDeCodigo(3).doTipoDominio().preencherComElementoDeCodigo(5).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(TR) Concluso para despacho da presidência">
        <task name="(TR) Concluso para despacho da presidência" swimlane="Magistrado">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write"/>
                <variable name="MinutarEmLote" mapped-name="minutarLote:MinutarEmLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Remessa para a presidência" name="Nó de Desvio - (TR) Remessa para a presidência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Assinar despacho da presidencia" name="Encaminhar para assinatura"/>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial'))}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:documento:tipo:minuta:ids','63,64')}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TR) Assinar despacho da presidencia">
        <task name="(TR) Assinar despacho da presidencia" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
                <variable name="HomologarMovimentos" mapped-name="homologadorEventoTree:HomologarMovimentos" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Remessa para a presidência" name="Nó de Desvio - (TR) Remessa para a presidência">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Concluso para despacho da presidência" name="Retornar para minuta"/>
        <transition to="(TR) Receber da presidência" name="(TR) Receber da presidência">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(TR) Receber da presidência')}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('Processo_Fluxo_revisarMinuta','63,64')}"/>
        </event>
    </task-node>
    <node name="(TR) Receber da presidência">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:deslocamento:colegiadoDestino')}"/>
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso()}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (TR) Remessa para a presidência">
        <task name="Nó de Desvio - (TR) Remessa para a presidência" swimlane="Nó de Desvio - (TR) Remessa para a presidência"/>
        <transition to="Término" name="Término"/>
        <transition to="(TR) Concluso para decisão da presidência" name="(TR) Concluso para decisão da presidência"/>
        <transition to="(TR) Concluso para despacho da presidência" name="(TR) Concluso para despacho da presidência"/>
        <transition to="(TR) Assinar decisão da presidência" name="(TR) Assinar decisão da presidência"/>
        <transition to="(TR) Assinar despacho da presidencia" name="(TR) Assinar despacho da presidencia"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
