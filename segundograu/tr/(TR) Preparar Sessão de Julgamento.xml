<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(TR) Preparar Sessão de Julgamento">
    <description><![CDATA[Controle de processos antes e depois da sessão de julgamento.
(TR) Confirmar relatório - voto - ementa - avisoVotoRequired - #{tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired')}
(TR) Elaborar relatório - voto - ementa - avisoVotoRequired - #{tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired')}]]></description>    
    <!-- SWIMLANES -->
    <swimlane name="Secretaria Segundo Grau">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('8:1338,8:5483')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (TR) Preparar Sessão de Julgamento"/>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:5197,6:1469,8:1338')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:5197,6:1469,8:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Assessoria"/>
        <transition to="(TR) Elaborar relatório - voto - ementa" name="(TR) Elaborar relatório - voto - ementa"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(TR) Elaborar relatório - voto - ementa">
        <task name="(TR) Elaborar relatório - voto - ementa" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
                <variable name="avisoVotoRequired" mapped-name="textAlert:avisoVotoRequired" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Validar Voto - Relatorio" name="Encaminhar para confirmação">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tarefaOrigem', '(TR) Elaborar relatório - voto - ementa')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tarefaDestino', '(TR) Confirmar relatório - voto - ementa')}"/>
        </transition>
        <transition to="(TR) Registrar cancelamento de decisão colegiada" name="Ignorar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('textAlert:avisoVotoRequired')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('avisoVotoRequired')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <decision expression="#{(util.isEmpty(sessaoProcessoDocumentoHome.carregarDocumento('V')) or sessaoProcessoDocumentoHome.carregarDocumento('V').get(0).processoDocumento == null or empty sessaoProcessoDocumentoHome.carregarDocumento('V').get(0).processoDocumento.processoDocumentoBin.modeloDocumento) or (util.isEmpty(sessaoProcessoDocumentoHome.carregarDocumento('R')) or sessaoProcessoDocumentoHome.carregarDocumento('R').get(0).processoDocumento == null or empty sessaoProcessoDocumentoHome.carregarDocumento('R').get(0).processoDocumento.processoDocumentoBin.modeloDocumento) ? tramitacaoProcessualService.recuperaVariavel('tarefaOrigem') : tramitacaoProcessualService.recuperaVariavel('tarefaDestino')}" name="(TR) Validar Voto - Relatorio">
        <transition to="(TR) Confirmar relatório - voto - ementa" name="(TR) Confirmar relatório - voto - ementa"/>
        <transition to="(TR) Elaborar relatório - voto - ementa" name="(TR) Elaborar relatório - voto - ementa"/>
        <transition to="(TR) Registrar aptidão para julgamento" name="(TR) Registrar aptidão para julgamento"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tarefaOrigem')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tarefaDestino')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('avisoVotoRequired', (util.isEmpty(sessaoProcessoDocumentoHome.carregarDocumento('V')) or sessaoProcessoDocumentoHome.carregarDocumento('V').get(0).processoDocumento == null or empty sessaoProcessoDocumentoHome.carregarDocumento('V').get(0).processoDocumento.processoDocumentoBin.modeloDocumento) ? 'O Voto é obrigatório para prosseguir na tarefa.' : '' ) }"/>
            <action expression="#{util.isEmpty(sessaoProcessoDocumentoHome.carregarDocumento('R')) or sessaoProcessoDocumentoHome.carregarDocumento('R').get(0).processoDocumento == null or empty sessaoProcessoDocumentoHome.carregarDocumento('R').get(0).processoDocumento.processoDocumentoBin.modeloDocumento ? tramitacaoProcessualService.gravaVariavel('avisoVotoRequired', ( ( tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired') != null ) ? tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired').concat(' O Relatório é obrigatório para prosseguir na tarefa.') : 'O Relatório é obrigatório para prosseguir na tarefa.' ) ) : '' }"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired') != null and tramitacaoProcessualService.recuperaVariavel('avisoVotoRequired').isEmpty() ? tramitacaoProcessualService.apagaVariavel('avisoVotoRequired') : '' }"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(TR) Confirmar relatório - voto - ementa">
        <task name="(TR) Confirmar relatório - voto - ementa" swimlane="Magistrado">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoColegiado" mapped-name="frame:WEB-INF_xhtml_flx_votacaoColegiado" access="read,write"/>
                <variable name="avisoVotoRequired" mapped-name="textAlert:avisoVotoRequired" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Validar Voto - Relatorio" name="Solicitar inclusão em pauta">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tarefaOrigem', '(TR) Confirmar relatório - voto - ementa')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('tarefaDestino', '(TR) Registrar aptidão para julgamento')}"/>
        </transition>
        <transition to="(TR) Elaborar relatório - voto - ementa" name="Retornar à assessoria"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao',false)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('textAlert:avisoVotoRequired')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('avisoVotoRequired')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:votacaoColegiado:controlaLiberacao')}"/>
        </event>
    </task-node>
    <node name="(TR) Registrar aptidão para julgamento">
        <transition to="(TR) Aguardando sessão de julgamento" name="(TR) Aguardando sessão de julgamento"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, true)}"/>
        </event>
    </node>
    <node name="(TR) Retirar aptidão para julgamento">
        <transition to="(TR) Elaborar relatório - voto - ementa" name="(TR) Elaborar relatório - voto - ementa"/>
        <event type="node-enter">
            <action expression="#{processoJudicialManager.aptidaoParaJulgamento(processoTrfHome.instance.idProcessoTrf, false)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(TR) Aguardando sessão de julgamento">
        <task name="(TR) Aguardando sessão de julgamento" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_votacaoVogal" mapped-name="frame:WEB-INF_xhtml_flx_votacaoVogal" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Retirar aptidão para julgamento" name="Retornar à assessoria">
            <condition expression="#{processoJudicialManager.findById(processInstance.contextInstance.getVariable('processo')).selecionadoPauta}"/>
        </transition>
        <transition to="(TR) O relator é o vencedor?" name="Encaminhar manualmente para assinatura do inteiro teor"/>
        <transition to="(TR) Registrar cancelamento de decisão colegiada" name="Cancelar tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator', true)}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Encaminhar manualmente para assinatura do inteiro teor')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:colegiado:aguardaSessao:relator')}"/>
        </event>
    </task-node>
    <decision expression="#{not empty tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') and tramitacaoProcessualService.recuperaVariavel('pje:fluxo:colegiado:orgaoVencedor:id') == tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador ? '(TR) Assinar inteiro teor' : '(TR) Deslocar para o gabinete vencedor'}" name="(TR) O relator é o vencedor?">
        <transition to="(TR) Deslocar para o gabinete vencedor" name="(TR) Deslocar para o gabinete vencedor"/>
        <transition to="(TR) Assinar inteiro teor" name="(TR) Assinar inteiro teor"/>
    </decision>
    <node name="(TR) Deslocar para o gabinete vencedor">
        <transition to="(TR) Assinar inteiro teor" name="(TR) Assinar inteiro teor"/>
        <event type="node-enter">
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:orgaoVencedor:id'))}"/>
            <action expression="#{processInstance.contextInstance.setVariable('pje:fluxo:deslocamento:orgaoCargoDestino', processInstance.contextInstance.getVariable('pje:fluxo:colegiado:cargoVencedor:id'))}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(TR) Assinar inteiro teor">
        <task name="(TR) Assinar inteiro teor" swimlane="Assessoria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_elaborarAcordao" mapped-name="frame:WEB-INF_xhtml_flx_elaborarAcordao" access="read,write"/>
            </controller>
        </task>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Lançar movimentações de julgamento" name="(TR) Lançar movimentações de julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Aguardando sessão de julgamento" name="Retornar para aguardar sessão de julgamento"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(TR) Lançar movimentações de julgamento')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:ementa:permiteIncluir',true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:relatorio:permiteIncluir',true)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:elaborarAcordao:voto:permiteIncluir',true)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(TR) Lançar movimentações de julgamento">
        <task name="(TR) Lançar movimentações de julgamento" swimlane="Assessoria"/>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Retornar para gabinete do relator" name="Finalizar e sair da tarefa"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavel('pje:atoProferido'))}"/>
        </event>
    </task-node>
    <node name="(TR) Retornar para gabinete do relator">
        <transition to="(TR) Julgados em sessão" name="(TR) Despachados pós acórdão"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:orgaoCargoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorCargo.idOrgaoJulgadorCargo)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:deslocamento:colegiadoDestino', tramitacaoProcessualService.recuperaProcesso().orgaoJulgadorColegiado.idOrgaoJulgadorColegiado)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.deslocarFluxoParaOrgaoDiverso(processInstance.contextInstance.getVariable('processo'))}"/>
        </event>
    </node>
    <node name="(TR) Registrar cancelamento de decisão colegiada">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:decisaocolegiada:cancelada', true)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(TR) Julgados em sessão">
        <task name="(TR) Julgados em sessão" swimlane="Secretaria Segundo Grau">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
                <variable name="MovimentarLote" mapped-name="movimentarLote:MovimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="Término" name="Cumprir acórdão"/>
        <transition to="Nó de Desvio - (TR) Preparar Sessão de Julgamento" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(TR) Lançar movimentações de julgamento" name="Retornar para lançar movimentações de julgamento"/>
    </task-node>
    <task-node end-tasks="true" name="Nó de Desvio - (TR) Preparar Sessão de Julgamento">
        <task name="Nó de Desvio - (TR) Preparar Sessão de Julgamento" swimlane="Nó de Desvio - (TR) Preparar Sessão de Julgamento"/>
        <transition to="Término" name="Término"/>
        <transition to="(TR) Elaborar relatório - voto - ementa" name="(TR) Elaborar relatório - voto - ementa"/>
        <transition to="(TR) Aguardando sessão de julgamento" name="(TR) Aguardando sessão de julgamento"/>
        <transition to="(TR) Assinar inteiro teor" name="(TR) Assinar inteiro teor"/>
        <transition to="(TR) Lançar movimentações de julgamento" name="(TR) Lançar movimentações de julgamento"/>
        <transition to="(TR) Confirmar relatório - voto - ementa" name="(TR) Confirmar relatório - voto - ementa"/>
        <transition to="(TR) Julgados em sessão" name="(TR) Despachados pós acórdão"/>
    </task-node>
    <end-state name="Término"/>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
