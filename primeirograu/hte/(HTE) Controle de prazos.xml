<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(HTE) Controle de prazos">
    <description><![CDATA[Código do fluxo: HTE_CONTPRAZOS

Descrição: Controle de prazos de intimações.

Raia        Localização              Papel
Secretaria  Secretaria               Chefe de Secretaria
            Gabinete                 Magistrado
            Assessoria               Assessor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,6:1469,7:5197')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (HTE) Controle de prazos">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(HTE) Separação em intimação" name="(HTE) Separação em intimação"/>
    </start-state>  
    <!-- NODES -->
    <fork name="(HTE) Separação em intimação">
        <transition to="(HTE) Existe intimação via correios pendente de ciência?" name="(HTE) Existe intimação via correios pendente de ciência?"/>
        <transition to="(HTE) Existe intimação via sistema pendente de ciência?" name="(HTE) Existe intimação via sistema pendente de ciência?"/>
    </fork>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM SituacaoProcesso AS s WHERE s.nomeTarefa = '(HTE) Intimação pendente de AR - AGUARDAR' AND s.processoTrf.idProcessoTrf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Separação em intimação com ou sem prazo' : '(HTE) Intimação pendente de AR - AGUARDAR'}" name="(HTE) Existe registro do processo na tarefa de aguardar AR?">
        <transition to="(HTE) Intimação pendente de AR - AGUARDAR" name="(HTE) Intimação pendente de AR - AGUARDAR"/>
        <transition to="(HTE) Separação em intimação com ou sem prazo" name="(HTE) Separação em intimação com ou sem prazo"/>
    </decision>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'C' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Existe registro do processo na tarefa de aguardar AR?' : '(HTE) Separação em intimação com ou sem prazo'}" name="(HTE) Existe intimação via correios pendente de ciência?">
        <transition to="(HTE) Separação em intimação com ou sem prazo" name="(HTE) Separação em intimação com ou sem prazo"/>
        <transition to="(HTE) Existe registro do processo na tarefa de aguardar AR?" name="(HTE) Existe registro do processo na tarefa de aguardar AR?"/>
    </decision>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND pe.meioExpedicaoExpediente = 'E' AND ppe.dtCienciaParte IS NULL AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Separação em intimação com ou sem prazo' : '(HTE) Junção em intimação'}" name="(HTE) Existe intimação via sistema pendente de ciência?">
        <transition to="(HTE) Separação em intimação com ou sem prazo" name="(HTE) Separação em intimação com ou sem prazo"/>
        <transition to="(HTE) Junção em intimação" name="(HTE) Junção em intimação"/>
    </decision>
    <task-node end-tasks="true" name="(HTE) Intimação pendente de AR - AGUARDAR">
        <task name="(HTE) Intimação pendente de AR - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Intimação pendente de AR - REGISTRAR" name="Registrar devolução do AR"/>
        <transition to="(HTE) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <event type="task-assign">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('comunicacaoProcessualAction:idsExpedientes', entityManager.createNativeQuery(&quot;select string_agg(cast(pe.id_processo_expediente as text), ',') from tb_processo_expediente pe where pe.in_meio_expedicao_expediente = 'C' and pe.id_processo_trf = &quot;.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf)).getSingleResult().toString())}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:registroCiencia', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:correios:registroCiencia')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(HTE) Intimação pendente de AR - REGISTRAR">
        <task name="(HTE) Intimação pendente de AR - REGISTRAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Intimação pendente de AR - AGUARDAR" name="Retornar para aguardar AR"/>
        <transition to="(HTE) Separação em intimação com ou sem prazo" name="Verificar existência de prazo"/>
        <transition to="(HTE) Apagar variáveis do fluxo" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:edicaoNumeroAR', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', 'Verificar existência de prazo')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:correios:edicaoNumeroAR')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <fork name="(HTE) Separação em intimação com ou sem prazo">
        <transition to="(HTE) Existe expediente com prazo em aberto?" name="(HTE) Existe expediente com prazo em aberto?"/>
        <transition to="(HTE) Existe intimação sem prazo?" name="(HTE) Existe intimação sem prazo?"/>
    </fork>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND ppe.tipoPrazo != 'S' AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Existe registro do processo na tarefa com prazo?' : '(HTE) Junção em intimação com ou sem prazo'}" name="(HTE) Existe expediente com prazo em aberto?">
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="(HTE) Junção em intimação com ou sem prazo"/>
        <transition to="(HTE) Existe registro do processo na tarefa com prazo?" name="(HTE) Existe registro do processo na tarefa com prazo?"/>
    </decision>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM SituacaoProcesso AS s WHERE s.nomeTarefa = '(HTE) Intimação com prazo em curso - AGUARDAR' AND s.processoTrf.idProcessoTrf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Junção em intimação com ou sem prazo' : '(HTE) Intimação com prazo em curso - AGUARDAR'}" name="(HTE) Existe registro do processo na tarefa com prazo?">
        <transition to="(HTE) Intimação com prazo em curso - AGUARDAR" name="(HTE) Intimação com prazo em curso - AGUARDAR"/>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="(HTE) Junção em intimação com ou sem prazo"/>
    </decision>
    <task-node end-tasks="true" name="(HTE) Intimação com prazo em curso - AGUARDAR">
        <task name="(HTE) Intimação com prazo em curso - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: O processo contém intimação com prazo em curso. Após o fechamento de todos os prazos que estão abertos, o processo será encaminhado automaticamente para tarefa "(HTE) Intimação com prazo decorrido - ANALISAR".
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Prazos de intimações continuam em aberto?" name="(HTE) Prazos de intimações continuam em aberto?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguardaPeticao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(HTE) Prazos de intimações continuam em aberto?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguardaPeticao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND ppe.tipoPrazo != 'S' AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Intimação com prazo em curso - AGUARDAR' : '(HTE) Intimação com prazo decorrido - ANALISAR'}" name="(HTE) Prazos de intimações continuam em aberto?">
        <transition to="(HTE) Intimação com prazo em curso - AGUARDAR" name="(HTE) Intimação com prazo em curso - AGUARDAR"/>
        <transition to="(HTE) Intimação com prazo decorrido - ANALISAR" name="(HTE) Intimação com prazo decorrido - ANALISAR"/>
    </decision>
    <task-node end-tasks="true" name="(HTE) Intimação com prazo decorrido - ANALISAR">
        <task name="(HTE) Intimação com prazo decorrido - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Intimação com prazo decorrido. Clique na próxima ação abaixo para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND ppe.tipoPrazo = 'S' AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Existe registro do processo na tarefa sem prazo?' : '(HTE) Junção em intimação com ou sem prazo'}" name="(HTE) Existe intimação sem prazo?">
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="(HTE) Junção em intimação com ou sem prazo"/>
        <transition to="(HTE) Existe registro do processo na tarefa sem prazo?" name="(HTE) Existe registro do processo na tarefa sem prazo?"/>
    </decision>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM SituacaoProcesso AS s WHERE s.nomeTarefa = '(HTE) Intimação sem prazo - AGUARDAR' AND s.processoTrf.idProcessoTrf = :idProcessoTrf&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Junção em intimação com ou sem prazo' : '(HTE) Intimação sem prazo - AGUARDAR'}" name="(HTE) Existe registro do processo na tarefa sem prazo?">
        <transition to="(HTE) Intimação sem prazo - AGUARDAR" name="(HTE) Intimação sem prazo - AGUARDAR"/>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="(HTE) Junção em intimação com ou sem prazo"/>
    </decision>
    <task-node end-tasks="true" name="(HTE) Intimação sem prazo - AGUARDAR">
        <task name="(HTE) Intimação sem prazo - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: O processo encontra-se com intimação sem prazo. Mantenha-o nesta tarefa caso queira aguardar a resposta ou clique na próxima ação abaixo para cancelar e sair da tarefa.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="Cancelar e sair da tarefa"/>
        <transition to="(HTE) Intimação sem prazo continua aberto?" name="(HTE) Intimação sem prazo continua aberto?">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguardaPeticao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(HTE) Intimação sem prazo continua aberto?')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguardaPeticao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.pessoaParte.idPessoa != 4266 AND pe.tipoProcessoDocumento.idTipoProcessoDocumento != 34 AND ppe.tipoPrazo = 'S' AND ppe.fechado = false&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(HTE) Intimação sem prazo - AGUARDAR' : '(HTE) Intimação sem prazo e fechado - ANALISAR'}" name="(HTE) Intimação sem prazo continua aberto?">
        <transition to="(HTE) Intimação sem prazo - AGUARDAR" name="(HTE) Intimação sem prazo - AGUARDAR"/>
        <transition to="(HTE) Intimação sem prazo e fechado - ANALISAR" name="(HTE) Intimação sem prazo e fechado - ANALISAR"/>
    </decision>
    <task-node end-tasks="true" name="(HTE) Intimação sem prazo e fechado - ANALISAR">
        <task name="(HTE) Intimação sem prazo e fechado - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: label_informacao
   Label: Intimação com prazos fechados. Clique na próxima ação para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(HTE) Junção em intimação com ou sem prazo" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (HTE) Controle de prazos" name="Nó de Desvio - (HTE) Controle de prazos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <join name="(HTE) Junção em intimação com ou sem prazo">
        <transition to="(HTE) Junção em intimação" name="(HTE) Junção em intimação"/>
    </join>
    <join name="(HTE) Junção em intimação">
        <transition to="(HTE) Apagar variáveis do fluxo" name="(HTE) Apagar variáveis do fluxo"/>
    </join>
    <node name="(HTE) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('comunicacaoProcessualAction:idsExpedientes')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (HTE) Controle de prazos">
        <task name="Nó de Desvio - (HTE) Controle de prazos" swimlane="Nó de Desvio - (HTE) Controle de prazos"/>
        <transition to="Término" name="Término"/>
        <transition to="(HTE) Intimação com prazo em curso - AGUARDAR" name="(HTE) Intimação com prazo em curso - AGUARDAR"/>
        <transition to="(HTE) Intimação com prazo decorrido - ANALISAR" name="(HTE) Intimação com prazo decorrido - ANALISAR"/>
        <transition to="(HTE) Intimação sem prazo - AGUARDAR" name="(HTE) Intimação sem prazo - AGUARDAR"/>
        <transition to="(HTE) Intimação sem prazo e fechado - ANALISAR" name="(HTE) Intimação sem prazo e fechado - ANALISAR"/>
        <transition to="(HTE) Intimação pendente de AR - AGUARDAR" name="(HTE) Intimação pendente de AR - AGUARDAR"/>
        <transition to="(HTE) Intimação pendente de AR - REGISTRAR" name="(HTE) Intimação pendente de AR - REGISTRAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
