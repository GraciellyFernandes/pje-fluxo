<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(HTE) Preparar ato judicial de decisão de reativação">
    <description><![CDATA[Código do fluxo: HTE_PAJ_DEC_REAT.

Descrição: Fluxo destinado ao preparo de atos judiciais de decisões sobre reativação.

Raia        Localização              Papel
Assessoria  Assessoria               Assessor
            Gabinete                 Magistrado
            Secretaria               Chefe de Secertaria
Magistrado  Assessoria               Assessor
            Gabinete                 Magistrado
            Secretaria               Chefe de Secretaria]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('7:5197,6:1469,5:1338')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,6:5197,5:1338')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Magistrado"/>
        <transition to="(HTE) Concluso para decisão sobre reativação - MINUTAR" name="(HTE) Concluso para decisão sobre reativação - MINUTAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(HTE) Concluso para decisão sobre reativação - MINUTAR">
        <task name="(HTE) Concluso para decisão sobre reativação - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial 
   Label: Minuta em elaboração 
   Escrita: Sim
   Obrig.: Sim 
   Tipo: Editor

2. minutarLote 
   Label: Minutar em lote
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote

*Eventos de Tarefa*

1. Tipo do evento: Sair Tarefa
   Argupamento eventos: Magistrado
   Condição para lançamento temporário: #{true}]]></description>
        <transition to="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação" name="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Concluso para decisão sobre reativação - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
        </event>
        <event type="task-start">
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(HTE) Concluso para decisão sobre reativação - ASSINAR">
        <task name="(HTE) Concluso para decisão sobre reativação - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: Assinar em lote
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação" name="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Concluso para decisão sobre reativação - MINUTAR" name="Retornar para minuta"/>
        <transition to="(HTE) Apagar variáveis do fluxo" name="(HTE) Apagar variáveis do fluxo">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(HTE) Apagar variáveis do fluxo" name="Documento já assinado">
            <condition expression="#{not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(HTE) Apagar variáveis do fluxo')}"/>
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '62,63,64')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
        </event>
    </task-node>
    <node name="(HTE) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação">
        <task name="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação" swimlane="Nó de Desvio - (HTE) Preparar ato judicial de decisão de reativação"/>
        <transition to="Término" name="Término"/>
        <transition to="(HTE) Concluso para decisão sobre reativação - MINUTAR" name="(HTE) Concluso para decisão sobre reativação - MINUTAR"/>
        <transition to="(HTE) Concluso para decisão sobre reativação - ASSINAR" name="(HTE) Concluso para decisão sobre reativação - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
