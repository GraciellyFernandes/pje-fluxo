<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Expedição de ofício">
    <description><![CDATA[Código do fluxo: EF_EXP_OFI

Descrição: Expedir ofício..

Raia        Localização     Papel
Secretaria  Secretaria      Chefe de Secretaria
Secretaria  Secretaria      Servidor de Secretaria
Secretaria  Gabinete        Magistrado
Secretaria  Corregedoria    Servidor Corregedoria
Secretaria  Corregedoria    Magistrado Corregedor
Magistrado  Secretaria      Chefe de Secretaria
Magistrado  Secretaria      Servidor de Secretaria
Magistrado  Gabinete        Magistrado
Magistrado  Corregedoria    Servidor Corregedoria
Magistrado  Corregedoria    Magistrado Corregedor
Magistrado  Gabinete        Magistrado Gabinete]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (EF) Expedição de ofício">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(EF) Ofício - EXPEDIR" name="(EF) Ofício - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Ofício - EXPEDIR">
        <task name="(EF) Ofício - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="expedir_oficio" mapped-name="textEditCombo:expedir_oficio" access="read,write"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: expedir_oficio
   Label: Expedir ofício
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de ofício" name="Nó de Desvio - (EF) Expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Sem prazo" name="Prazo para manifestação: Sem prazo"/>
        <transition to="(EF) Prazo de 5 dias" name="Prazo para manifestação: 005 dias"/>
        <transition to="(EF) Prazo de 10 dias" name="Prazo para manifestação: 010 dias"/>
        <transition to="(EF) Prazo de 15 dias" name="Prazo para manifestação: 015 dias"/>
        <transition to="(EF) Prazo de 20 dias" name="Prazo para manifestação: 020 dias"/>
        <transition to="(EF) Prazo de 30 dias" name="Prazo para manifestação: 030 dias"/>
        <transition to="(EF) Prazo de 60 dias" name="Prazo para manifestação: 060 dias"/>
        <transition to="(EF) Prazo de 90 dias" name="Prazo para manifestação: 090 dias"/>
        <transition to="(EF) Prazo de 120 dias" name="Prazo para manifestação: 120 dias"/>
        <transition to="(EF) Preparar comunicação padrão" name="Preparar comunicação (padrão)"/>
        <transition to="(EF) Apagar minuta não assinada de ofício" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '34')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',34)}"/>
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:expedir_oficio'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Preparar comunicação padrão">
        <sub-process name="(EF) Preparar ato de comunicação de ofício" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de ofício" name="(EF) Apagar minuta não assinada de ofício"/>
    </process-state>
    <node name="(EF) Sem prazo">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 0)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 5 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 5)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 10 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 10)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 15 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 15)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 20 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 20)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 30 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 30)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 60 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 60)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 90 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 90)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 120 dias">
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:oficio', 120)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Ofício pendente de escolha de assinatura">
        <task name="(EF) Ofício pendente de escolha de assinatura" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="expedir_oficio" mapped-name="textEditCombo:expedir_oficio" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio')).concat(' dias.'))}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: expedir_oficio
   Label: Expedir ofício
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

3. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de ofício" name="Nó de Desvio - (EF) Expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Ofício [chefe de secretaria] - ASSINAR" name="Encaminhar para assinatura do chefe de secretaria"/>
        <transition to="(EF) Ofício [magistrado] - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(EF) Ofício - EXPEDIR" name="Retornar para expedição"/>
        <transition to="(EF) Apagar minuta não assinada de ofício" name="Cancelar e sair da tarefa"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:exp_ofi:idProcessoDocumento', processoHome.idProcessoDocumento)}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '34')}"/>
            <action expression="#{tipoDocumento.set('TipoDocumento',34)}"/>
            <action expression="#{lancadorMovimentosService.apagarMovimentosTemporarios()}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:expedir_oficio'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Ofício [chefe de secretaria] - ASSINAR">
        <task name="(EF) Ofício [chefe de secretaria] - ASSINAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio')).concat(' dias.'))}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: Processo_Fluxo_revisarMinuta
   Label: Minuta de ofício em elaboração
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

3. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

4. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de ofício" name="Nó de Desvio - (EF) Expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Ofício - EXPEDIR" name="Retornar para expedição">
            <condition expression="#{empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and  revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="(EF) Ofício [magistrado] - ASSINAR" name="Encaminhar para assinatura do magistrado"/>
        <transition to="(EF) Lançar movimento de expedição de ofício" name="(EF) Lançar movimento de expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Lançar movimento de expedição de ofício" name="Documento já assinado.">
            <condition expression="#{not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Lançar movimento de expedição de ofício')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '34')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('condicaoLancamentoMovimentosTemporario', '${true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Ofício [magistrado] - ASSINAR">
        <task name="(EF) Ofício [magistrado] - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read"/>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio')).concat(' dias.'))}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: Processo_Fluxo_revisarMinuta
   Label: Minuta de ofício em elaboração
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

3. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

4. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de ofício" name="Nó de Desvio - (EF) Expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Lançar movimento de expedição de ofício" name="Documento já assinado.">
            <condition expression="#{not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="(EF) Lançar movimento de expedição de ofício" name="(EF) Lançar movimento de expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Lançar movimento de expedição de ofício')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '34')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('condicaoLancamentoMovimentosTemporario', '${true}')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('condicaoLancamentoMovimentosTemporario')}"/>
        </event>
    </task-node>
    <node name="(EF) Lançar movimento de expedição de ofício">
        <transition to="(EF) Ofício - IMPRIMIR" name="(EF) Ofício - IMPRIMIR"/>
        <event type="node-enter">
            <action expression="#{atoComunicacaoService.intimarDestinatarioCorreios(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, parametroUtil.getParametro('pje:tjrn:fluxo:destinatarioOficioPadrao'), tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:oficio'), tramitacaoProcessualService.recuperaVariavel('ef:exp_ofi:idProcessoDocumento'), 79)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Ofício - IMPRIMIR">
        <task name="(EF) Ofício - IMPRIMIR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: Para impressão do ofício, vá no detalhamento do processo e clique em "Documentos".
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de ofício" name="Nó de Desvio - (EF) Expedição de ofício">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Controle de prazos de ofícios" name="Aguardar retorno do AR"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Controle de prazos de ofícios">
        <sub-process name="(EF) Controle de prazos de ofícios" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de ofício" name="(EF) Apagar minuta não assinada de ofício"/>
    </process-state>
    <node name="(EF) Apagar minuta não assinada de ofício">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('expedir_oficio')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Expedição de ofício">
        <task name="Nó de Desvio - (EF) Expedição de ofício" swimlane="Nó de Desvio - (EF) Expedição de ofício"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Ofício - EXPEDIR" name="(EF) Ofício - EXPEDIR"/>
        <transition to="(EF) Ofício [chefe de secretaria] - ASSINAR" name="(EF) Ofício [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Ofício [magistrado] - ASSINAR" name="(EF) Ofício [magistrado] - ASSINAR"/>
        <transition to="(EF) Ofício pendente de escolha de assinatura" name="(EF) Ofício pendente de escolha de assinatura"/>
        <transition to="(EF) Ofício - IMPRIMIR" name="(EF) Ofício - IMPRIMIR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
