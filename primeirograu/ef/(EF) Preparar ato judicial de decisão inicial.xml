<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Preparar ato judicial de decisão inicial">
    <description><![CDATA[Código do fluxo: EF_PAJ_DEC_INI

Descrição: Fluxo destinado ao preparo de atos judiciais de decisão inicial..

Raia        Localização Papel
Assessoria  Gabinete    Magistrado
Assessoria  Assessoria  Assessor
Assessoria  Secretaria  Chefe de Secretaria
Magistrado  Gabinete    Magistrado
Magistrado  Assessoria  Assessor
Magistrado  Secretaria  Chefe de Secretaria]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Assessoria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,7:5197,5:1338')}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469,7:5197,5:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial"/>
        <transition to="(EF) Lançar movimento de concluso" name="(EF) Lançar movimento de concluso"/>
    </start-state>  
    <!-- NODES -->
    <node name="(EF) Lançar movimento de concluso">
        <transition to="(EF) Concluso para decisão inicial - MINUTAR" name="(EF) Concluso para decisão inicial - MINUTAR"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(51).comComplementoDeCodigo(3).doTipoDominio().preencherComElementoDeCodigo(6).lancarMovimento()}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Concluso para decisão inicial - MINUTAR">
        <task name="(EF) Concluso para decisão inicial - MINUTAR" swimlane="Assessoria">
            <controller>
                <variable name="minuta_ato_judicial" mapped-name="textEditCombo:minuta_ato_judicial" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_ato_judicial
   Label: Minuta em elaboração de ato judicial
   Escrita: Sim
   Obrig. Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial" name="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Concluso para decisão inicial - ASSINAR" name="Encaminhar para assinatura"/>
        <event type="node-enter">
            <action expression="#{processoHome.fazerTriagemExecucaoFiscal('(EF) Concluso para decisão inicial - MINUTAR', true, true, true, true)}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{processoHome.limparCaixaTriagem()}"/>
        </event>
        <event type="task-end">
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial') ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_ato_judicial')) : ''}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
        </event>
        <event type="task-start">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64,'.concat(parametroUtil.getParametro('idTipoDocumentoDecisaoCitacao')))}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{true}')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Concluso para decisão inicial - ASSINAR">
        <task name="(EF) Concluso para decisão inicial - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
                <variable name="assinaturaLote" mapped-name="assinarLote:assinaturaLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_revisarMinuta
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Frame

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Movimentação em Lote

3. Variável: assinaturaLote
   Label: 
   Escrita: Sim
   Obrig. Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial" name="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Concluso para decisão inicial - MINUTAR" name="Retornar para minuta"/>
        <transition to="Término" name="Documento já assinado">
            <condition expression="#{processoHome.instance.idProcesso &gt; 0 and not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{processoHome.fazerTriagemExecucaoFiscal('(EF) Concluso para decisão inicial - ASSINAR', true, true, true, true)}"/>
        </event>
        <event type="task-create">
            <action expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '63,64,'.concat(parametroUtil.getParametro('idTipoDocumentoDecisaoCitacao')))}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', 'Término')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:lancamentoMovimentoObrigatorio','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{processoHome.limparCaixaTriagem()}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial">
        <task name="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial" swimlane="Nó de Desvio - (EF) Preparar ato judicial de decisão inicial"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Concluso para decisão inicial - MINUTAR" name="(EF) Concluso para decisão inicial - MINUTAR"/>
        <transition to="(EF) Concluso para decisão inicial - ASSINAR" name="(EF) Concluso para decisão inicial - ASSINAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
