<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Expedição de carta de ordem, precatória ou rogatória">
    <description><![CDATA[Código do fluxo: EF_EXP_CARTA.

Descrição: Preparar cartas de ordem, precatória ou rogatória..

Raia        Localização     Papel
Secretaria  Secretaria      Chefe de Secretaria
Secretaria  Secretaria      Servidor de Secretaria
Secretaria  Gabinete        Magistrado
Secretaria  Corregedoria    Servidor Corregedoria
Secretaria  Corregedoria    Magistrado Corregedor
Magistrado  Secretaria      Chefe de Secretaria
Magistrado  Secretaria      Servidor de Secretaria
Magistrado  Gabinete        Magistrado
Magistrado  Corregedoria    Servidor Corregedoria
Magistrado  Corregedoria    Magistrado Corregedor
Magistrado  Gabinete        Magistrado Gabinete]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR" name="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR">
        <task name="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="minuta_carta" mapped-name="textEditCombo:minuta_carta" access="read,write,required"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_carta
   Label: Minuta em elaboração de carta
   Escrita: Sim
   Obrig.: Sim
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória" name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Sem prazo" name="Prazo para manifestação: Sem prazo"/>
        <transition to="(EF) Prazo de 5 dias" name="Prazo para manifestação: 005 dias"/>
        <transition to="(EF) Prazo de 10 dias" name="Prazo para manifestação: 010 dias"/>
        <transition to="(EF) Prazo de 15 dias" name="Prazo para manifestação: 015 dias"/>
        <transition to="(EF) Prazo de 20 dias" name="Prazo para manifestação: 020 dias"/>
        <transition to="(EF) Prazo de 30 dias" name="Prazo para manifestação: 030 dias"/>
        <transition to="(EF) Prazo de 60 dias" name="Prazo para manifestação: 060 dias"/>
        <transition to="(EF) Prazo de 90 dias" name="Prazo para manifestação: 090 dias"/>
        <transition to="(EF) Prazo de 120 dias" name="Prazo para manifestação: 120 dias"/>
        <transition to="(EF) Apagar minuta não assinada de carta" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Preparar comunicação padrão" name="Preparar comunicação (padrão)"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_carta'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{tipoDocumento.set('TipoDocumento',94,205,215)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','94,205,215')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Preparar comunicação padrão">
        <sub-process name="(EF) Preparar ato de comunicação de carta" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de carta" name="(EF) Apagar minuta não assinada de carta"/>
    </process-state>
    <node name="(EF) Sem prazo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 0)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 5 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 5)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 10 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 10)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 15 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 15)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 20 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 20)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 30 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 30)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 60 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 60)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 90 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 90)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 120 dias">
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:carta', 120)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR">
        <task name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="minuta_carta" mapped-name="textEditCombo:minuta_carta" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta')).concat(' dias.'))}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

2. Variável: minuta_carta
   Label: Minuta em elaboração de carta
   Escrita: Sim
   Obrig.: Sim
   Tipo: Editor

3. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória" name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Destinatário: partes do polo ativo" name="Destinatário: partes do polo ativo"/>
        <transition to="(EF) Destinatário: partes do polo passivo" name="Destinatário: partes do polo passivo"/>
        <transition to="(EF) Destinatário: partes dos polos ativo e passivo" name="Destinatário: partes dos polos ativo e passivo"/>
        <transition to="(EF) Destinatário: representantes do polo ativo" name="Destinatário: representantes do polo ativo"/>
        <transition to="(EF) Destinatário: representantes do polo passivo" name="Destinatário: representantes do polo passivo"/>
        <transition to="(EF) Destinatário: representantes dos polos ativo e passivo" name="Destinatário: representantes dos polos ativo e passivo"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR" name="Retornar para expedição"/>
        <transition to="(EF) Apagar minuta não assinada de carta" name="Cancelar e sair da tarefa"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_carta'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tipoDocumento.set('TipoDocumento',94,205,215)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','94,205,215')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:exp_carta:idProcessoDocumento', processoHome.idProcessoDocumento)}"/>
        </event>
    </task-node>
    <node name="(EF) Destinatário: partes do polo ativo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'A')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'partes do polo ativo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: partes do polo passivo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'P')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'partes do polo passivo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: partes dos polos ativo e passivo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'T')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'partes dos polos ativo e passivo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: representantes do polo ativo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'RA')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'representantes do polo ativo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: representantes do polo passivo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'RP')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'representantes do polo passivo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: representantes dos polos ativo e passivo">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:carta', 'RT')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:carta', 'representantes dos polos ativo e passivo')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR">
        <task name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta')).concat(' dias.'))}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

2. Variável: aviso2
   Label: #{'Destinatário: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:texto:carta')).concat('.')}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

3. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar Minuta
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

4. Variável: MovimentarEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

5. Variável: AssinaturaEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória" name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR" name="Retornar para minuta de carta de ordem, precatória ou rogatória"/>
        <transition to="(EF) Lançar movimento de expedição de carta de ordem, precatória ou rogatória" name="(EF) Lançar movimento de expedição de carta de ordem, precatória ou rogatória">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','94,205,215')}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Lançar movimento de expedição de carta de ordem, precatória ou rogatória')}"/>
        </event>
    </task-node>
    <node name="(EF) Lançar movimento de expedição de carta de ordem, precatória ou rogatória">
        <transition to="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR" name="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR"/>
        <event type="node-enter">
            <action expression="#{documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento')).getTipoProcessoDocumento().getIdTipoProcessoDocumento() == 215 ? atoComunicacaoService.intimarPolosCarta(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:carta'), tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta'), tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento'), 75) : ''}"/>
            <action expression="#{documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento')).getTipoProcessoDocumento().getIdTipoProcessoDocumento() == 94 ? atoComunicacaoService.intimarPolosCarta(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:carta'), tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta'), tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento'), 76) : ''}"/>
            <action expression="#{documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento')).getTipoProcessoDocumento().getIdTipoProcessoDocumento() == 205 ? atoComunicacaoService.intimarPolosCarta(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:carta'), tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:carta'), tramitacaoProcessualService.recuperaVariavel('ef:exp_carta:idProcessoDocumento'), 77) : ''}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR">
        <task name="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: Para impressão da carta, vá no detalhamento do processo e clique em "Documentos".
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória" name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Controle de prazos de carta" name="Encaminhar para controle de prazo"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <process-state name="(EF) Controle de prazos de carta">
        <sub-process name="(EF) Controle de prazos de carta" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de carta" name="(EF) Apagar minuta não assinada de carta"/>
    </process-state>
    <node name="(EF) Apagar minuta não assinada de carta">
        <transition to="(EF) Devolução à secretaria" name="(EF) Devolução à secretaria"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_carta')}"/>
        </event>
    </node>
    <process-state name="(EF) Devolução à secretaria">
        <sub-process name="(EF) Fluxo de devolução à secretaria" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória">
        <task name="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória" swimlane="Nó de Desvio - (EF) Expedição de carta de ordem, precatória ou rogatória"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR" name="(EF) Carta de ordem, precatória ou rogatória - EXPEDIR"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - ASSINAR" name="(EF) Carta de ordem, precatória ou rogatória - ASSINAR"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR" name="(EF) Carta de ordem, precatória ou rogatória pendente de escolha de destinatário - SELECIONAR"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR" name="(EF) Carta de ordem, precatória ou rogatória - IMPRIMIR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
