<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Preparar ato de comunicação de carta">
    <description><![CDATA[Código do fluxo: EF_PAC_CARTA

Descrição: Preparar ato de comunicação como intimações e citações via correios, sistema e edital.

Raia        Localização    Papel
Secretaria   Secretaria    Chefe de Secretaria
Secretaria   Gabinete      Magistrado]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (EF) Preparar ato de comunicação de carta">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR" name="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR">
        <task name="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_prepararExpediente
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar ato de comunicação de carta" name="Nó de Desvio - (EF) Preparar ato de comunicação de carta">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Controle de prazo de carta precatória após expedição" name="(EF) Controle de prazo de carta precatória após expedição">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaIntimacaoPessoal'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Controle de prazo de carta precatória após expedição')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '60,65')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('L')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Controle de prazo de carta precatória após expedição">
        <sub-process name="(EF) Controle de prazos de carta" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('variavelErrosConectorEct')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('comunicacaoProcessualAction:idsExpedientes')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Preparar ato de comunicação de carta">
        <task name="Nó de Desvio - (EF) Preparar ato de comunicação de carta" swimlane="Nó de Desvio - (EF) Preparar ato de comunicação de carta"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR" name="(EF) Carta de ordem, precatória ou rogatória genérica - EXPEDIR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
