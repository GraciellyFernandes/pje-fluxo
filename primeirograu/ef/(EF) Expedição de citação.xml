<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Expedição de citação">
    <description><![CDATA[Código do fluxo: EF_EXP_CIT

Descrição: Preparar citação.

Raia        Localização     Papel
Secretaria  Secretaria      Chefe de Secretaria
Secretaria  Secretaria      Servidor de Secretaria
Secretaria  Gabinete        Magistrado
Secretaria  Corregedoria    Servidor Corregedoria
Secretaria  Corregedoria    Magistrado Corregedor
Magistrado  Secretaria      Chefe de Secretaria
Magistrado  Secretaria      Servidor de Secretaria
Magistrado  Gabinete        Magistrado
Magistrado  Corregedoria    Servidor Corregedoria
Magistrado  Corregedoria    Magistrado Corregedor
Magistrado  Gabinete        Magistrado Gabinete]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (EF) Expedição de citação">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(EF) Citação - EXPEDIR" name="(EF) Citação - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(EF) Citação - EXPEDIR">
        <task name="(EF) Citação - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="minuta_citacao" mapped-name="textEditCombo:minuta_citacao" access="read,write"/>
                <variable name="minutarLote" mapped-name="minutarLote:minutarLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: minuta_citacao
   Label: Minuta em elaboração de citação
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

2. Variável: minutarLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Minutar em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Sem prazo" name="Prazo para manifestação: Sem prazo"/>
        <transition to="(EF) Prazo de 5 dias" name="Prazo para manifestação: 005 dias"/>
        <transition to="(EF) Prazo de 10 dias" name="Prazo para manifestação: 010 dias"/>
        <transition to="(EF) Prazo de 15 dias" name="Prazo para manifestação: 015 dias"/>
        <transition to="(EF) Prazo de 20 dias" name="Prazo para manifestação: 020 dias"/>
        <transition to="(EF) Prazo de 30 dias" name="Prazo para manifestação: 030 dias"/>
        <transition to="(EF) Prazo de 60 dias" name="Prazo para manifestação: 060 dias"/>
        <transition to="(EF) Prazo de 90 dias" name="Prazo para manifestação: 090 dias"/>
        <transition to="(EF) Prazo de 120 dias" name="Prazo para manifestação: 120 dias"/>
        <transition to="(EF) Apagar minuta não assinada de citação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Preparar comunicação padrão" name="Preparar comunicação (padrão)"/>
        <event type="task-create">
            <action name="upd" expression="#{tipoDocumento.set('TipoDocumento',65)}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','65')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_citacao'))}"/>
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Preparar comunicação padrão">
        <sub-process name="(EF) Preparar ato de comunicação de citação" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de citação" name="(EF) Apagar minuta não assinada de citação"/>
    </process-state>
    <node name="(EF) Sem prazo">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 0)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 5 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 5)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 10 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 10)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 15 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 15)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 20 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 20)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 30 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 30)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 60 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 60)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 90 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 90)}"/>
        </event>
    </node>
    <node name="(EF) Prazo de 120 dias">
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:prazoManifestacao:citacao', 120)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR">
        <task name="(EF) Citação pendente de escolha de destinatário - SELECIONAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="minuta_citacao" mapped-name="textEditCombo:minuta_citacao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao')).concat(' dias.'))}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

2. Variável: minuta_citacao
   Label: Minuta em elaboração de citação
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

3. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Destinatário: partes do polo passivo" name="Destinatário: partes do polo passivo"/>
        <transition to="(EF) Destinatário: representantes do polo passivo" name="Destinatário: representantes do polo passivo"/>
        <transition to="(EF) Destinatário: partes e representantes do polo passivo" name="Destinatário: partes e representantes do polo passivo"/>
        <transition to="(EF) Apagar minuta não assinada de citação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Retornar para minuta" name="Retornar para expedição"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:exp_cit:idProcessoDocumento', processoHome.idProcessoDocumento)}"/>
        </event>
        <event type="task-create">
            <action expression="#{tipoDocumento.set('TipoDocumento',65)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','65')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_citacao'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
    </task-node>
    <node name="(EF) Destinatário: partes do polo passivo">
        <transition to="(EF) Meio já informado?" name="(EF) Meio já informado?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:citacao', 'P')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:citacao', 'partes do polo passivo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: representantes do polo passivo">
        <transition to="(EF) Meio já informado?" name="(EF) Meio já informado?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:citacao', 'RP')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:citacao', 'representantes do polo passivo')}"/>
        </event>
    </node>
    <node name="(EF) Destinatário: partes e representantes do polo passivo">
        <transition to="(EF) Meio já informado?" name="(EF) Meio já informado?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:citacao', 'TP')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:destExpediente:texto:citacao', 'partes e representantes do polo passivo')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao') == null ? '(EF) Citação pendente de escolha do meio de expedição - SELECIONAR' : '(EF) Citação - ASSINAR'}" name="(EF) Meio já informado?">
        <transition to="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR" name="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR"/>
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao:texto','C'.equals(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao')) ? 'Correios' : ('E'.equals(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao')) ? 'Sistema' : ('M'.equals(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao')) ? 'Central de Mandados' : ('D'.equals(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao')) ? 'Edital' : ''))))}"/>
        </event>
    </decision>
    <task-node end-tasks="true" name="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR">
        <task name="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
                <variable name="minuta_citacao" mapped-name="textEditCombo:minuta_citacao" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao')).concat(' dias.'))}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

2. Variável: aviso2
   Label: #{'Destinatário: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:texto:citacao')).concat('.')}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

3. Variável: minuta_citacao
   Label: Minuta em elaboração de citação
   Escrita: Sim
   Obrig.: Não
   Tipo: Editor

4. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="(EF) Meio de expedição: Correios" name="Meio de expedição: Correios"/>
        <transition to="(EF) Meio de expedição: Sistema" name="Meio de expedição: Sistema"/>
        <transition to="(EF) Meio de expedição: Central de Mandados" name="Meio de expedição: Central de Mandados"/>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Apagar minuta não assinada de citação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Meio de expedição: Edital" name="Meio de expedição: Edital"/>
        <transition to="(EF) Retornar para minuta" name="Retornar para expedição"/>
        <event type="task-create">
            <action expression="#{tipoDocumento.set('TipoDocumento',65)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','65')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_citacao'))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('TipoDocumentoTipoProcessoDocumento')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
    </task-node>
    <node name="(EF) Meio de expedição: Correios">
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao', 'C')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao:texto', 'Correios')}"/>
        </event>
    </node>
    <node name="(EF) Meio de expedição: Sistema">
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao', 'E')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao:texto', 'Sistema')}"/>
        </event>
    </node>
    <node name="(EF) Meio de expedição: Central de Mandados">
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao', 'M')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao:texto', 'Central de Mandados')}"/>
        </event>
    </node>
    <node name="(EF) Meio de expedição: Edital">
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao', 'D')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:meioExp:citacao:texto', 'Edital')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Citação - ASSINAR">
        <task name="(EF) Citação - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
                <variable name="aviso3" mapped-name="textAlert:aviso3" access="read,write"/>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="MovimentarEmLote" mapped-name="movimentarLote:MovimentarEmLote" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: #{'Prazo para manifestação: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'Sem prazo.' : ''.concat(tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao')).concat(' dias.'))}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

2. Variável: aviso2
   Label: #{'Destinatário: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:texto:citacao')).concat('.')}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

3. Variável: aviso3
   Label: #{'Meio de expedição: '.concat(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao:texto')).concat('.')}
    Escrita: Sim
    Obrig.: Não
    Tipo: Aviso

4. Variável: Processo_Fluxo_revisarMinuta
   Label: Assinar Minuta
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

5. Variável: MovimentarEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

6. Variável: AssinaturaEmLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Assinatura em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) É Correios?" name="(EF) É Correios?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Retornar para minuta" name="Retornar para minuta de citação"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds','65')}"/>
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) É Correios?')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{taskInstanceUtil.deleteVariableLocally('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao') == 'C' ? '(EF) Lançar movimento de citação - Correios' : '(EF) É Sistema?'}" name="(EF) É Correios?">
        <transition to="(EF) Lançar movimento de citação - Correios" name="(EF) Lançar movimento de citação - Correios"/>
        <transition to="(EF) É Sistema?" name="(EF) É Sistema?"/>
    </decision>
    <node name="(EF) Lançar movimento de citação - Correios">
        <transition to="(EF) Citação - IMPRIMIR" name="(EF) Citação - IMPRIMIR"/>
        <event type="node-enter">
            <action expression="#{not tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao').contains('R') ? atoComunicacaoService.intimarPolosCorreios(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'P', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 80): ''}"/>
            <action expression="#{not 'P'.equals(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao')) ? atoComunicacaoService.intimarPolosCorreios(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'RP', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 80): ''}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) Citação - IMPRIMIR">
        <task name="(EF) Citação - IMPRIMIR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: aviso1
   Label: Para impressão da citação, vá no detalhamento do processo e clique em "Documentos".
   Escrita: Sim
   Obrig. Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Controle de prazos de citação" name="Aguardar retorno do AR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:citacao:idProcessoExpediente', entityManager.createNativeQuery(parametroUtil.getParametro('cit:query_expediente')).setParameter(&quot;idProcesso&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).setParameter(&quot;idProcessoDocumento&quot;, tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento')).getSingleResult().toString())}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao') == 'E' ? '(EF) Lançar movimento de citação - Sistema' : '(EF) É Central de Mandados?'}" name="(EF) É Sistema?">
        <transition to="(EF) Lançar movimento de citação - Sistema" name="(EF) Lançar movimento de citação - Sistema"/>
        <transition to="(EF) É Central de Mandados?" name="(EF) É Central de Mandados?"/>
    </decision>
    <node name="(EF) Lançar movimento de citação - Sistema">
        <transition to="(EF) Publicação no DJe" name="(EF) Publicação no DJe"/>
        <event type="node-enter">
            <action expression="#{not tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao').contains('R') ? atoComunicacaoService.intimarPolosEletronicamente(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'P', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento')): ''}"/>
            <action expression="#{not 'P'.equals(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao')) ? atoComunicacaoService.intimarPolosEletronicamente(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'RP', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento')): ''}"/>
        </event>
    </node>
    <process-state name="(EF) Publicação no DJe">
        <sub-process name="(EF) Publicações no DJe" binding="late"/>
        <transition to="(EF) Controle de prazos de citação" name="(EF) Controle de prazos de citação"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao') == 'M' ? '(EF) Existe alguma Central de Mandados?' : '(EF) É Edital?'}" name="(EF) É Central de Mandados?">
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?"/>
        <transition to="(EF) É Edital?" name="(EF) É Edital?"/>
    </decision>
    <decision expression="#{conectorMandados.haVariasCentraisMandado() ? '(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR' : '(EF) Lançar movimento de citação - Central de Mandados'}" name="(EF) Existe alguma Central de Mandados?">
        <transition to="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR" name="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR"/>
        <transition to="(EF) Lançar movimento de citação - Central de Mandados" name="(EF) Lançar movimento de citação - Central de Mandados"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR">
        <task name="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_expedientes_centralmandados" mapped-name="frame:Processo_Fluxo_expedientes_centralmandados" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_expedientes_centralmandados
   Label: Expedientes da central de mandados
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame


2. Variável: movimentacaoLote
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Expedição de citação" name="Nó de Desvio - (EF) Expedição de citação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Lançar movimento de citação - Central de Mandados" name="Finalizar e prosseguir"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Lançar movimento de citação - Central de Mandados')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <node name="(EF) Lançar movimento de citação - Central de Mandados">
        <transition to="(EF) Controle de prazos de citação" name="(EF) Controle de prazos de citação"/>
        <event type="node-enter">
            <action expression="#{not tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao').contains('R') ? atoComunicacaoService.intimarPolosMandado(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'P', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 78): ''}"/>
            <action expression="#{not 'P'.equals(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao')) ? atoComunicacaoService.intimarPolosMandado(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'RP', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 78): ''}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:meioExp:citacao') == 'D' ? '(EF) Lançar movimento de citação - Edital' : '(EF) Apagar minuta não assinada de citação'}" name="(EF) É Edital?">
        <transition to="(EF) Lançar movimento de citação - Edital" name="(EF) Lançar movimento de citação - Edital"/>
        <transition to="(EF) Apagar minuta não assinada de citação" name="(EF) Apagar minuta não assinada de citação"/>
    </decision>
    <node name="(EF) Lançar movimento de citação - Edital">
        <transition to="(EF) Controle de prazos de citação" name="(EF) Controle de prazos de citação"/>
        <event type="node-enter">
            <action expression="#{not tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao').contains('R') ? atoComunicacaoService.intimarPolosEdital(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'P', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 80): ''}"/>
            <action expression="#{not 'P'.equals(tramitacaoProcessualService.recuperaVariavel('ef:destExpediente:citacao')) ? atoComunicacaoService.intimarPolosEdital(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf, 'RP', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? 'S' : 'D', tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao') == 0 ? null : tramitacaoProcessualService.recuperaVariavel('ef:prazoManifestacao:citacao'), tramitacaoProcessualService.recuperaVariavel('ef:exp_cit:idProcessoDocumento'), 80): ''}"/>
        </event>
    </node>
    <process-state name="(EF) Controle de prazos de citação">
        <sub-process name="(EF) Controle de prazos de citação" binding="late"/>
        <transition to="(EF) Apagar minuta não assinada de citação" name="(EF) Apagar minuta não assinada de citação"/>
    </process-state>
    <node name="(EF) Apagar minuta não assinada de citação">
        <transition to="(EF) Devolução à secretaria" name="(EF) Devolução à secretaria"/>
        <event type="node-enter">
            <action expression="${documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:citacao:idProcessoExpediente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:prazoManifestacao:citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:destExpediente:citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:destExpediente:texto:citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:meioExp:citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:meioExp:citacao:texto')}"/>
        </event>
    </node>
    <node name="(EF) Retornar para minuta">
        <transition to="(EF) Citação - EXPEDIR" name="(EF) Citação - EXPEDIR"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:meioExp:citacao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:meioExp:citacao:texto')}"/>
        </event>
    </node>
    <process-state name="(EF) Devolução à secretaria">
        <sub-process name="(EF) Fluxo de devolução à secretaria" binding="late"/>
        <transition to="Término" name="Término"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Expedição de citação">
        <task name="Nó de Desvio - (EF) Expedição de citação" swimlane="Nó de Desvio - (EF) Expedição de citação"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Citação - EXPEDIR" name="(EF) Citação - EXPEDIR"/>
        <transition to="(EF) Citação - ASSINAR" name="(EF) Citação - ASSINAR"/>
        <transition to="(EF) Citação pendente de escolha de destinatário - SELECIONAR" name="(EF) Citação pendente de escolha de destinatário - SELECIONAR"/>
        <transition to="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR" name="(EF) Citação pendente de escolha do meio de expedição - SELECIONAR"/>
        <transition to="(EF) Citação - IMPRIMIR" name="(EF) Citação - IMPRIMIR"/>
        <transition to="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR" name="(EF) Citação pendente de escolha de Central de Mandados - SELECIONAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
