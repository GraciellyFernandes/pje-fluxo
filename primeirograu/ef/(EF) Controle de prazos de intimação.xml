<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Controle de prazos de intimação">
    <description><![CDATA[Código do fluxo: EF_CONTPRAZOS_INT

Descrição: Fluxo destinado ao controle de prazos de intimação.

Raia        Localização     Papel
Secretaria  Secretaria      Chefe de Secretaria]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (EF) Controle de prazos de intimação">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901,7:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial"/>
        <transition to="(EF) É via correios?" name="(EF) É via correios?"/>
    </start-state>  
    <!-- NODES -->
    <decision expression="#{'C'.equals(tramitacaoProcessualService.recuperaVariavel('ef:meioExp:intimacao')) ? '(EF) Intimação pendente de AR - AGUARDAR' : '(EF) Intimação com prazo em curso - AGUARDAR'}" name="(EF) É via correios?">
        <transition to="(EF) Intimação pendente de AR - AGUARDAR" name="(EF) Intimação pendente de AR - AGUARDAR"/>
        <transition to="(EF) Intimação com prazo em curso - AGUARDAR" name="(EF) Intimação com prazo em curso - AGUARDAR"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Intimação pendente de AR - AGUARDAR">
        <task name="(EF) Intimação pendente de AR - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="avisoHaExpedientes" mapped-name="textAlert:avisoHaExpedientes" access="read,write"/>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: avisoHaExpedientes
   Label: #{tramitacaoProcessualService.recuperaVariavel('avisoHaExpedientes') != null ? tramitacaoProcessualService.recuperaVariavel('avisoHaExpedientes') : ''}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: Inserir informação de AR
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Há expedientes em aberto?" name="Registrar devolução do AR"/>
        <transition to="(EF) Intimação pendente de AR [030 dias] - AGUARDAR" name="(EF) Intimação pendente de AR [030 dias] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-assign">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('comunicacaoProcessualAction:idsExpedientes', entityManager.createNativeQuery(&quot;select string_agg(cast(pe.id_processo_expediente as text), ',') from tb_processo_expediente pe where pe.in_meio_expedicao_expediente = 'C' and pe.id_processo_trf = &quot;.concat(tramitacaoProcessualService.recuperaProcesso().idProcessoTrf)).getSingleResult().toString())}"/>
        </event>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:registroCiencia', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda30', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação pendente de AR [030 dias] - AGUARDAR')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes')}"/>
            <action expression="#{atoComunicacaoService.getAtosComunicacaoAbertos(processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))) &gt; 0 || processoParteExpedienteManager.getAtosComunicacaoSemPrazo(0, processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))).size() &gt; 0  ? tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes') : tramitacaoProcessualService.gravaVariavel('avisoHaExpedientes', 'Todos os expedientes estão fechados. Por favor clicar em &quot;Cancelar e sair da tarefa&quot;') }"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('textAlert:avisoHaExpedientes')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda30')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação pendente de AR [030 dias] - AGUARDAR">
        <task name="(EF) Intimação pendente de AR [030 dias] - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: Inserir informação de AR
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Há expedientes em aberto?" name="Registrar devolução do AR"/>
        <transition to="(EF) Intimação pendente de AR [060 dias] - AGUARDAR" name="(EF) Intimação pendente de AR [060 dias] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:registroCiencia', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda60', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação pendente de AR [060 dias] - AGUARDAR')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes')}"/>
            <action expression="#{atoComunicacaoService.getAtosComunicacaoAbertos(processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))) &gt; 0 || processoParteExpedienteManager.getAtosComunicacaoSemPrazo(0, processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))).size() &gt; 0  ? tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes') : tramitacaoProcessualService.gravaVariavel('avisoHaExpedientes', 'Todos os expedientes estão fechados. Por favor clicar em &quot;Cancelar e sair da tarefa&quot;') }"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('textAlert:avisoHaExpedientes')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda60')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação pendente de AR [060 dias] - AGUARDAR">
        <task name="(EF) Intimação pendente de AR [060 dias] - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: Inserir informação de AR
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Há expedientes em aberto?" name="Registrar devolução do AR"/>
        <transition to="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR" name="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:registroCiencia', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda100', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes')}"/>
            <action expression="#{atoComunicacaoService.getAtosComunicacaoAbertos(processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))) &gt; 0 || processoParteExpedienteManager.getAtosComunicacaoSemPrazo(0, processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))).size() &gt; 0  ? tramitacaoProcessualService.apagaVariavel('avisoHaExpedientes') : tramitacaoProcessualService.gravaVariavel('avisoHaExpedientes', 'Todos os expedientes estão fechados. Por favor clicar em &quot;Cancelar e sair da tarefa&quot;') }"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('textAlert:avisoHaExpedientes')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda100')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR">
        <task name="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: Inserir informação de AR
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Há expedientes em aberto?" name="Registrar devolução do AR"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:registroCiencia', false)}"/>
        </event>
    </task-node>
    <decision expression="#{atoComunicacaoService.getAtosComunicacaoAbertos(processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))) &gt; 0 || processoParteExpedienteManager.getAtosComunicacaoSemPrazo(0, processoJudicialService.findById(org.jboss.seam.bpm.processInstance.contextInstance.getVariable('processo'))).size() &gt; 0 ? '(EF) Intimação pendente de registro de AR - REGISTRAR' : '(EF) Intimação pendente de AR - AGUARDAR'}" name="(EF) Há expedientes em aberto?">
        <transition to="(EF) Intimação pendente de AR - AGUARDAR" name="(EF) Intimação pendente de AR - AGUARDAR"/>
        <transition to="(EF) Intimação pendente de registro de AR - REGISTRAR" name="(EF) Intimação pendente de registro de AR - REGISTRAR"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Intimação pendente de registro de AR - REGISTRAR">
        <task name="(EF) Intimação pendente de registro de AR - REGISTRAR" swimlane="Secretaria">
            <controller>
                <variable name="WEB-INF_xhtml_flx_exped_controleCorreios" mapped-name="frame:WEB-INF_xhtml_flx_exped_controleCorreios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: WEB-INF_xhtml_flx_exped_controleCorreios
   Label: Verificar cumprimento de AR
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Intimação pendente de AR - AGUARDAR" name="Retornar para aguardar devolução do AR"/>
        <transition to="(EF) Existe intimação?" name="Finalizar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:correios:edicaoNumeroAR',false)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação com prazo em curso - AGUARDAR">
        <task name="(EF) Intimação com prazo em curso - AGUARDAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: O processo contém intimação com prazo em curso. Após o fechamento de todos os prazos que estão abertos, o processo será encaminhado automaticamente para tarefa "(EF) Intimação com prazo decorrido - ANALISAR".
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Prazos de intimações continuam em aberto?" name="(EF) Prazos de intimações continuam em aberto?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguardaPeticao', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Prazos de intimações continuam em aberto?')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguardaPeticao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <decision expression="#{entityManager.createQuery(&quot;SELECT COUNT(*) FROM ProcessoParteExpediente AS ppe JOIN ppe.processoExpediente AS pe WHERE ppe.processoJudicial.idProcessoTrf = :idProcessoTrf AND ppe.tipoPrazo != 'S' AND ppe.fechado = false AND pe.tipoProcessoDocumento.idTipoProcessoDocumento = 60&quot;).setParameter(&quot;idProcessoTrf&quot;, tramitacaoProcessualService.recuperaProcesso().idProcessoTrf).getSingleResult() &gt; 0 ? '(EF) Intimação com prazo em curso - AGUARDAR' : '(EF) Intimação com prazo decorrido - ANALISAR'}" name="(EF) Prazos de intimações continuam em aberto?">
        <transition to="(EF) Intimação com prazo em curso - AGUARDAR" name="(EF) Intimação com prazo em curso - AGUARDAR"/>
        <transition to="(EF) Intimação com prazo decorrido - ANALISAR" name="(EF) Intimação com prazo decorrido - ANALISAR"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Intimação com prazo decorrido - ANALISAR">
        <task name="(EF) Intimação com prazo decorrido - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Intimação com prazo decorrido. Clique na próxima ação abaixo para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR" name="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda30', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação com prazo decorrido [030 dias] - ANALISAR')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda30')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR">
        <task name="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Intimação com prazo decorrido. Clique na próxima ação abaixo para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR" name="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda60', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação com prazo decorrido [060 dias] - ANALISAR')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda60')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR">
        <task name="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Intimação com prazo decorrido. Clique na próxima ação abaixo para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR" name="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:aguarda100', true)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:aguarda100')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR">
        <task name="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="movimentacaoLote" mapped-name="movimentarLote:movimentacaoLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: aviso1
   Label: Intimação com prazo decorrido. Clique na próxima ação abaixo para prosseguir.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: movimentacaoLote
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote]]></description>
        <transition to="Término" name="Finalizar e sair da tarefa"/>
        <transition to="Nó de Desvio - (EF) Controle de prazos de intimação" name="Nó de Desvio - (EF) Controle de prazos de intimação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
        </event>
    </task-node>
    <decision expression="#{util.eval(parametroUtil.getParametro('pje:tjrn:VerificaSerasaJUD')) ? '(EF) Registrar SerasaJUD' : '(EF) Prazos de intimações continuam em aberto?'}" name="(EF) Existe intimação?">
        <transition to="(EF) Prazos de intimações continuam em aberto?" name="(EF) Prazos de intimações continuam em aberto?"/>
        <transition to="(EF) Registrar SerasaJUD" name="(EF) Registrar SerasaJUD"/>
    </decision>
    <process-state name="(EF) Registrar SerasaJUD">
        <sub-process name="(EF) Registrar SerasaJUD" binding="late"/>
        <transition to="(EF) Prazos de intimações continuam em aberto?" name="Finalizar e sair da tarefa"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Controle de prazos de intimação">
        <task name="Nó de Desvio - (EF) Controle de prazos de intimação" swimlane="Nó de Desvio - (EF) Controle de prazos de intimação"/>
        <transition to="Término" name="Término"/>
        <transition to="(EF) Intimação com prazo decorrido - ANALISAR" name="(EF) Intimação com prazo decorrido - ANALISAR"/>
        <transition to="(EF) Intimação com prazo em curso - AGUARDAR" name="(EF) Intimação com prazo em curso - AGUARDAR"/>
        <transition to="(EF) Intimação pendente de AR - AGUARDAR" name="(EF) Intimação pendente de AR - AGUARDAR"/>
        <transition to="(EF) Intimação pendente de registro de AR - REGISTRAR" name="(EF) Intimação pendente de registro de AR - REGISTRAR"/>
        <transition to="(EF) Intimação pendente de AR [030 dias] - AGUARDAR" name="(EF) Intimação pendente de AR [030 dias] - AGUARDAR"/>
        <transition to="(EF) Intimação pendente de AR [060 dias] - AGUARDAR" name="(EF) Intimação pendente de AR [060 dias] - AGUARDAR"/>
        <transition to="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR" name="(EF) Intimação pendente de AR [100 dias ou mais] - AGUARDAR"/>
        <transition to="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR" name="(EF) Intimação com prazo decorrido [030 dias] - ANALISAR"/>
        <transition to="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR" name="(EF) Intimação com prazo decorrido [060 dias] - ANALISAR"/>
        <transition to="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR" name="(EF) Intimação com prazo decorrido [100 dias ou mais] - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
