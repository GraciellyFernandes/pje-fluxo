<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(EF) Preparar Ato de Comunicação">
    <description><![CDATA[Código do fluxo: EF_PAC.

Descrição: Fluxo destinado a permitir a realização de atos de comunicação, tais como citações, intimações, etc...

Raia         Localização   Papel
Secretaria   Secretaria    Chefe de Secretaria
Secretaria   Secretaria    Servidor de Secretaria
Secretaria   Gabinete      Magistrado
Secretaria   Corregedoria  Servidor Corregedoria
Secretaria   Corregedoria  Magistrado Corregedor
Magistrado   Secretaria    Chefe de Secretaria
Magistrado   Secretaria    Servidor de Secretaria
Magistrado   Gabinete      Magistrado
Magistrado   Gabinete      Magistrado Gabinete
Magistrado   Corregedoria  Servidor Corregedoria
Magistrado   Corregedoria  Magistrado Corregedor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853,6:5901')}" actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5483,6:1469,8:5852,8:5853')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(EF) Separação em Preparar Ato de Comunicação" name="(EF) Separação em Preparar Ato de Comunicação"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
        <task name="Nó de Desvio - (EF) Preparar Ato de Comunicação" swimlane="Nó de Desvio - (EF) Preparar Ato de Comunicação"/>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Citação e(ou) intimação - EXPEDIR" name="(EF) Citação e(ou) intimação - EXPEDIR"/>
        <transition to="(EF) DJe [Expedientes] - PREPARAR" name="(EF) DJe [Expedientes] - PREPARAR"/>
        <transition to="(EF) DJe [Relação] - PREPARAR" name="(EF) DJe [Relação] - PREPARAR"/>
        <transition to="(EF) DJe [Publicação] - AGUARDAR" name="(EF) DJe [Publicação] - AGUARDAR"/>
        <transition to="(EF) Mandado - EXPEDIR" name="(EF) Mandado - EXPEDIR"/>
        <transition to="(EF) Mandado [Central de mandados] - SELECIONAR" name="(EF) Mandado [Central de mandados] - SELECIONAR"/>
        <transition to="(EF) Citação e(ou) intimação - IMPRIMIR" name="(EF) Citação e(ou) intimação - IMPRIMIR"/>
        <transition to="(EF) Intimação ao Ministério Público - EXPEDIR" name="(EF) Intimação ao Ministério Público - EXPEDIR"/>
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="(EF) DJe [Conteúdo] - INFORMAR"/>
        <transition to="(EF) DJe [Conteúdo] - CONFIRMAR" name="(EF) DJe [Conteúdo] - CONFIRMAR"/>
        <transition to="(EF) DJe [Conteúdo] - IGNORAR" name="(EF) DJe [Conteúdo] - IGNORAR"/>
        <transition to="(EF) Intimação de reativação - EXPEDIR" name="(EF) Intimação de reativação - EXPEDIR"/>
        <transition to="(EF) Mandado [chefe de secretaria] - ASSINAR" name="(EF) Mandado [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR" name="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Citação e(ou) intimação [magistrado] - ASSINAR" name="(EF) Citação e(ou) intimação [magistrado] - ASSINAR"/>
    </task-node>
    <fork name="(EF) Separação em Preparar Ato de Comunicação">
        <transition to="(EF) É citação e(ou) intimação?" name="(EF) É citação e(ou) intimação?"/>
        <transition to="(EF) É DJE?" name="(EF) É DJE?"/>
        <transition to="(EF) É Mandado?" name="(EF) É Mandado?"/>
        <transition to="(EF) É intimação ao Ministério Público?" name="(EF) É intimação ao Ministério Público?"/>
        <transition to="(EF) É citação e(ou) intimação de reativação?" name="(EF) É citação e(ou) intimação de reativação?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:pac:intimar_mp', 'false')}"/>
        </event>
    </fork>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje') ? '(EF) DJe [Conteúdo] - INFORMAR' : '(EF) Junção em Preparar Ato de Comunicação'}" name="(EF) É DJE?">
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="(EF) DJe [Conteúdo] - INFORMAR"/>
    </decision>
    <join name="(EF) Junção em Preparar Ato de Comunicação">
        <transition to="(EF) Apagar variáveis do fluxo" name="Término"/>
    </join>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:citar_intimar') ? '(EF) Citação e(ou) intimação - EXPEDIR' : '(EF) Junção em Preparar Ato de Comunicação'}" name="(EF) É citação e(ou) intimação?">
        <transition to="(EF) Citação e(ou) intimação - EXPEDIR" name="(EF) Citação e(ou) intimação - EXPEDIR"/>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Citação e(ou) intimação - EXPEDIR">
        <task name="(EF) Citação e(ou) intimação - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação da citação e(ou) intimação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: Aviso1
   Label: Caso deseje encaminhar o expediente para uma tarefa específica de assinatura listadas abaixo, é essencial que todos as abas (Escolha dos destinatários, Preparar ato, Escolher documentos vinculados e finalizar) sejam preenchidas.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) É competência de Fazenda?" name="(EF) É competência de Fazenda?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do chefe de secretaria">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(EF) Citação e(ou) intimação - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR')}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(EF) Citação e(ou) intimação - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(EF) Citação e(ou) intimação [magistrado] - ASSINAR')}"/>
        </transition>
        <event type="node-enter">
            <action name="upd" expression="#{modeloDocumento.set('Processo_Fluxo_prepararExpediente',80)}"/>
        </event>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) É competência de Fazenda?')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR">
        <task name="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação da citação e(ou) intimação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(EF) É competência de Fazenda?" name="(EF) É competência de Fazenda?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Citação e(ou) intimação - EXPEDIR" name="Retornar para expedição de citação e(ou) intimação"/>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de citação e(ou) intimação?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntCitInt', '(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxCitInt', '(EF) Citação e(ou) intimação [magistrado] - ASSINAR')}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) É competência de Fazenda?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:CitIntValidaParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Citação e(ou) intimação [magistrado] - ASSINAR">
        <task name="(EF) Citação e(ou) intimação [magistrado] - ASSINAR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação da citação e(ou) intimação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(EF) É competência de Fazenda?" name="(EF) É competência de Fazenda?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Citação e(ou) intimação - EXPEDIR" name="Retornar para expedição de citação e (ou) intimação"/>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) É competência de Fazenda?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S,D')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempCitInt')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempCitInt', org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:CitIntValidaParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxCitInt') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntCitInt') }" name="(EF) Encaminhar para assinatura de citação e(ou) intimação?">
        <transition to="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR" name="(EF) Citação e(ou) intimação [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Citação e(ou) intimação - EXPEDIR" name="(EF) Citação e(ou) intimação - EXPEDIR"/>
        <transition to="(EF) Citação e(ou) intimação [magistrado] - ASSINAR" name="(EF) Citação e(ou) intimação [magistrado] - ASSINAR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntCitInt')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxCitInt')}"/>
        </event>
    </decision>
    <decision expression="#{processoTrfHome.possuiCompetencia(3) || processoTrfHome.possuiCompetencia(10) ? '(EF) Separação em citação e(ou) intimação' : '(EF) DJe [Conteúdo] - INFORMAR'}" name="(EF) É competência de Fazenda?">
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="(EF) DJe [Conteúdo] - INFORMAR"/>
        <transition to="(EF) Separação em citação e(ou) intimação" name="(EF) Separação em citação e(ou) intimação"/>
    </decision>
    <task-node end-tasks="true" name="(EF) DJe [Conteúdo] - INFORMAR">
        <task name="(EF) DJe [Conteúdo] - INFORMAR" swimlane="Secretaria">
            <controller>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
                <variable name="Aviso2" mapped-name="textAlert:Aviso2" access="read,write"/>
                <variable name="Aviso3" mapped-name="textAlert:Aviso3" access="read,write"/>
                <variable name="ef_label_magistrado_dje" mapped-name="textAlert:ef_label_magistrado_dje" access="read,write"/>
                <variable name="ef_magistrado_dje" mapped-name="combo_objetos:ef_magistrado_dje" access="read,write"/>
                <variable name="ef_conteudo_dje" mapped-name="text:ef_conteudo_dje" access="read,write"/>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Aviso1
   Label: ATENÇÃO:
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: Aviso2
   Label: O sistema PJe está integrado com o sistema Hermes. Ao fazer a publicação abaixo o texto será encaminhado automaticamente para o Diário da Justiça Eletrônico.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

3. Variável: Aviso3
   Label: Os atos encaminhados para publicação até as 17h:59m do dia corrente serão disponibilizados no DJe do mesmo dia. Após o referido horário a disponibilização ficará para o próximo dia útil.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

4. Variável: ef_label_magistrado_dje
   Label: Informe o magistrado que proferiu o ato:
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

5. Variável: ef_magistrado_dje
   Label: #{pessoaMagistradoDAO.magistradoPorOrgaoJulgador(tramitacaoProcessualService.recuperaProcesso().orgaoJulgador)}
   Escrita: Sim
   Obrig.: Não
   Tipo: Combo de objetos

6. Variável: ef_conteudo_dje
   Label: Informe apenas o teor do ato a ser publicado no DJe:
   Escrita: Sim
   Obrig.: Não
   Tipo: Texto

7. Variável: Processo_Fluxo_visualizarDecisao
   Label: Último ato judicial
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Preencheu conteúdo DJe?" name="Prosseguir"/>
        <transition to="(EF) DJe [Conteúdo] - IGNORAR" name="Cancelar e sair da tarefa"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef_conteudo_dje')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje_temp', tramitacaoProcessualService.recuperaVariavelTarefa('combo_objetos:ef_magistrado_dje').getIdUsuario())}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('combo_objetos:ef_magistrado_dje')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('conteudo_dje_temp', tramitacaoProcessualService.strToBase64(tramitacaoProcessualService.recuperaVariavelTarefa('text:ef_conteudo_dje')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('text:ef_conteudo_dje')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) DJe [Conteúdo] - IGNORAR">
        <task name="(EF) DJe [Conteúdo] - IGNORAR" swimlane="Secretaria">
            <controller>
                <variable name="Aviso_DJe" mapped-name="textAlert:Aviso_DJe" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Aviso_DJe
   Label: Deseja realmente ignorar a publicação para o DJe?
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="(EF) Separação em citação e(ou) intimação" name="Sim"/>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="Não"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp') == null || tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp') == &quot;&quot; ? '(EF) DJe [Conteúdo] - INFORMAR' : '(EF) DJe [Conteúdo] - CONFIRMAR'}" name="(EF) Preencheu conteúdo DJe?">
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="(EF) DJe [Conteúdo] - INFORMAR"/>
        <transition to="(EF) DJe [Conteúdo] - CONFIRMAR" name="(EF) DJe [Conteúdo] - CONFIRMAR"/>
    </decision>
    <task-node end-tasks="true" name="(EF) DJe [Conteúdo] - CONFIRMAR">
        <task name="(EF) DJe [Conteúdo] - CONFIRMAR" swimlane="Secretaria">
            <controller>
                <variable name="Aviso4" mapped-name="textAlert:Aviso4" access="read,write"/>
                <variable name="Aviso5" mapped-name="textAlert:Aviso5" access="read,write"/>
                <variable name="Aviso6" mapped-name="textAlert:Aviso6" access="read,write"/>
                <variable name="Aviso7" mapped-name="textAlert:Aviso7" access="read,write"/>
                <variable name="visualizar_dje" mapped-name="textAlert:visualizar_dje" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Aviso4
   Label: ATENÇÃO:
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

2. Variável: Aviso5
   Label: Caso queira ajustar o conteúdo abaixo, clique no botão "Retornar para ajustar conteúdo".
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

3. Variável: Aviso6
   Label: Após clicar no botão "Enviar para publicação no DJe", a publicação não poderá ser mais cancelada.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

4. Variável: Aviso7
   Label: ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso

5. Variável: visualizar_dje
   Label: #{tramitacaoProcessualService.base64ToString(tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp'))}
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) DJe [Conteúdo] - INFORMAR" name="Retornar para ajustar conteúdo"/>
        <transition to="(EF) Gravar Variáveis DJe" name="Enviar para publicação no DJe"/>
    </task-node>
    <node name="(EF) Gravar Variáveis DJe">
        <transition to="(EF) Separação em citação e(ou) intimação" name="(EF) Separação em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('conteudo_dje_direto', tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp')) : tramitacaoProcessualService.gravaVariavel('conteudo_dje', tramitacaoProcessualService.recuperaVariavel('conteudo_dje_temp')) }"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('magistrado_dje', tramitacaoProcessualService.recuperaVariavel('magistrado_dje_temp'))}"/>
            <action expression="#{preencherMovimento.deCodigo(1061).lancarMovimento()}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('data_dje_direto', dateUtil.getDataAtual('yyyy-MM-dd')) : tramitacaoProcessualService.gravaVariavel('data_dje', dateUtil.getDataAtual('yyyy-MM-dd'))}"/>
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje') ? tramitacaoProcessualService.gravaVariavel('id_oj_dje_direto', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador) : tramitacaoProcessualService.gravaVariavel('id_oj_dje', tramitacaoProcessualService.recuperaProcesso().orgaoJulgador.idOrgaoJulgador)}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(EF) DJe [Expedientes] - PREPARAR">
        <task name="(EF) DJe [Expedientes] - PREPARAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação da citação e(ou) intimação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) DJe [Relação] - PREPARAR" name="(EF) DJe [Relação] - PREPARAR">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) DJe [Relação] - PREPARAR')}"/>
        </event>
        <event type="task-start">
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('P')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) DJe [Relação] - PREPARAR">
        <task name="(EF) DJe [Relação] - PREPARAR" swimlane="Secretaria">
            <controller>
                <variable name="movimentaoEmLote" mapped-name="movimentarLote:movimentaoEmLote" access="read,write"/>
                <variable name="Processo_Fluxo_expedientes_diario" mapped-name="frame:Processo_Fluxo_expedientes_diario" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: movimentaoEmLote
   Label: Movimentar em lote
   Escrita: Sim
   Obrig.: Não
   Tipo: Habilitar Movimentação em Lote

2. Variável: Processo_Fluxo_expedientes_diario
   Label: Preparação de relação para o DJE
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) DJe [Publicação] - AGUARDAR" name="Aguardar publicação no DJE"/>
    </task-node>
    <task-node end-tasks="true" name="(EF) DJe [Publicação] - AGUARDAR">
        <task name="(EF) DJe [Publicação] - AGUARDAR" swimlane="Secretaria"/>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Prosseguir"/>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:expedir_mandado') ? '(EF) Mandado - EXPEDIR' : '(EF) Junção em Preparar Ato de Comunicação'}" name="(EF) É Mandado?">
        <transition to="(EF) Mandado - EXPEDIR" name="(EF) Mandado - EXPEDIR"/>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Mandado - EXPEDIR">
        <task name="(EF) Mandado - EXPEDIR" swimlane="Magistrado">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
                <variable name="Aviso1" mapped-name="textAlert:Aviso1" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação de mandado
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame

2. Variável: Aviso1
   Label: Caso deseje encaminhar o expediente para uma tarefa específica de assinatura listadas abaixo, é essencial que todos as abas (Escolha dos destinatários, Preparar ato, Escolher documentos vinculados e finalizar) sejam preenchidas.
   Escrita: Sim
   Obrig.: Não
   Tipo: Aviso]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do chefe de secretaria">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(EF) Mandado - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(EF) Mandado [chefe de secretaria] - ASSINAR')}"/>
        </transition>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(EF) Mandado - EXPEDIR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(EF) Mandado [magistrado] - ASSINAR')}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand', org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(EF) Mandado [chefe de secretaria] - ASSINAR">
        <task name="(EF) Mandado [chefe de secretaria] - ASSINAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Preparação de mandado
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Mandado - EXPEDIR" name="Retornar para expedição de mandado"/>
        <transition to="(EF) Encaminhar para assinatura de mandado?" name="Encaminhar para assinatura do magistrado">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:AntMand', '(EF) Mandado [chefe de secretaria] - ASSINAR')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:ProxMand', '(EF) Mandado [magistrado] - ASSINAR')}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Existe alguma Central de Mandados?')}"/>
            <action expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('M')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,167,168,169,170')}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:meiosComunicacoes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradorias'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaExpedientes'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaAgrupamentos'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{not empty tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand') ? tramitacaoProcessualService.gravaVariavel('prepararAto:mapaInstrumento'.concat(org.jboss.seam.bpm.taskInstance.getId()), tramitacaoProcessualService.recuperaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTempMand')))}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTempMand',org.jboss.seam.bpm.taskInstance.getId())}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('sg:tjrn:MandValidoParaAss', (preparaAtoComunicacaoAction.haDestinatarios() and preparaAtoComunicacaoAction.validaAtosDeComunicacao() and not empty preparaAtoComunicacaoAction.getAssinaturas()))}"/>
        </event>
    </task-node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('sg:tjrn:MandValidoParaAss') == true ? tramitacaoProcessualService.recuperaVariavel('sg:tjrn:ProxMand') : tramitacaoProcessualService.recuperaVariavel('sg:tjrn:AntMand') }" name="(EF) Encaminhar para assinatura de mandado?">
        <transition to="(EF) Mandado [chefe de secretaria] - ASSINAR" name="(EF) Mandado [chefe de secretaria] - ASSINAR"/>
        <transition to="(EF) Mandado - EXPEDIR" name="(EF) Mandado - EXPEDIR"/>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:MandValidoParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:AntMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:ProxMand')}"/>
        </event>
    </decision>
    <decision expression="#{conectorMandados.haVariasCentraisMandado() ? '(EF) Mandado [Central de mandados] - SELECIONAR' : '(EF) Lançar movimento de Expedição de Mandado'}" name="(EF) Existe alguma Central de Mandados?">
        <transition to="(EF) Mandado [Central de mandados] - SELECIONAR" name="(EF) Mandado [Central de mandados] - SELECIONAR"/>
        <transition to="(EF) Lançar movimento de Expedição de Mandado" name="(EF) Lançar movimento de Expedição de Mandado"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Mandado [Central de mandados] - SELECIONAR">
        <task name="(EF) Mandado [Central de mandados] - SELECIONAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_expedientes_centralmandados" mapped-name="frame:Processo_Fluxo_expedientes_centralmandados" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_expedientes_centralmandados
   Label: Expedientes da central de mandados
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Lançar movimento de Expedição de Mandado" name="Finalizar e prosseguir"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Lançar movimento de Expedição de Mandado')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <node name="(EF) Lançar movimento de Expedição de Mandado">
        <transition to="(EF) Controlar prazos via mandado" name="(EF) Controlar prazos via mandado"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('M', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(78).lancarMovimento()}')}"/>
        </event>
    </node>
    <process-state name="(EF) Controlar prazos via mandado">
        <sub-process name="(EF) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(EF) Apagar variáveis do fluxo" name="(EF) Apagar variáveis do fluxo"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:cpre:mandado','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:cpre:mandado')}"/>
        </event>
    </process-state>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesCorreios().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje')) ? '(EF) Lançar movimento de Expedição de Aviso de Recebimento' : '(EF) Junção em citação e(ou) intimação'}" name="(EF) É Correio?">
        <transition to="(EF) Lançar movimento de Expedição de Aviso de Recebimento" name="(EF) Lançar movimento de Expedição de Aviso de Recebimento"/>
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Citação e(ou) intimação - IMPRIMIR">
        <task name="(EF) Citação e(ou) intimação - IMPRIMIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_expedientes_correios" mapped-name="frame:Processo_Fluxo_expedientes_correios" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_expedientes_correios
   Label: Imprimir citações e(ou) intimações
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Controlar prazos via correios" name="Aguardar retorno do AR"/>
    </task-node>
    <process-state name="(EF) Controlar prazos via correios">
        <sub-process name="(EF) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:cpre:correios','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:cpre:correios')}"/>
        </event>
    </process-state>
    <fork name="(EF) Separação em citação e(ou) intimação">
        <transition to="(EF) É Correio?" name="(EF) É Correio?"/>
        <transition to="(EF) É via sistema?" name="(EF) É via sistema?"/>
        <transition to="(EF) É via Secretaria?" name="(EF) É via Secretaria?"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('conteudo_dje_temp')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('magistrado_dje_temp')}"/>
        </event>
    </fork>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesEletronico().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje')) ? '(EF) Lançar movimento de Expedição Outros documentos' : '(EF) Junção em citação e(ou) intimação'}" name="(EF) É via sistema?">
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
        <transition to="(EF) Lançar movimento de Expedição Outros documentos" name="(EF) Lançar movimento de Expedição Outros documentos"/>
    </decision>
    <node name="(EF) Lançar movimento de Expedição de Outros documentos">
        <transition to="(EF) Controlar prazos via MP" name="(EF) Controlar prazos via MP"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <process-state name="(EF) Controlar prazos via MP">
        <sub-process name="(EF) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:cpre:MP','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:cpre:MP')}"/>
        </event>
    </process-state>
    <join name="(EF) Junção em citação e(ou) intimação">
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
    </join>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesPessoal().size() &gt; 0 &amp;&amp; !(tramitacaoProcessualService.recuperaVariavel('ef:lanc:publicar_dje')) ? '(EF) Registrar ciência' : '(EF) Junção em citação e(ou) intimação'}" name="(EF) É via Secretaria?">
        <transition to="(EF) Registrar ciência" name="(EF) Registrar ciência"/>
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
    </decision>
    <node name="(EF) Registrar ciência">
        <description><![CDATA[]]></description>
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.registrarCienciaExpedientePessoal()}"/>
        </event>
    </node>
    <node name="(EF) Lançar movimento de Expedição de Aviso de Recebimento">
        <transition to="(EF) Citação e(ou) intimação - IMPRIMIR" name="(EF) Citação e(ou) intimação - IMPRIMIR"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('C', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(74).lancarMovimento()}')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:intimar_mp') ? '(EF) Intimação ao Ministério Público - EXPEDIR' : '(EF) Junção em Preparar Ato de Comunicação'}" name="(EF) É intimação ao Ministério Público?">
        <transition to="(EF) Intimação ao Ministério Público - EXPEDIR" name="(EF) Intimação ao Ministério Público - EXPEDIR"/>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Intimação ao Ministério Público - EXPEDIR">
        <task name="(EF) Intimação ao Ministério Público - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Intimar Ministério Público
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <transition to="(EF) Lançar movimento de Expedição de Outros documentos" name="(EF) Lançar movimento de Expedição de Outros documentos">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) Lançar movimento de Expedição de Outros documentos')}"/>
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69,65,71')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('E,C,S')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:pac:intimar_mp', 'true')}"/>
        </event>
    </task-node>
    <process-state name="(EF) Controlar prazos via sistema">
        <sub-process name="(EF) Controle de prazos e retorno de expedientes" binding="late"/>
        <transition to="(EF) Junção em citação e(ou) intimação" name="(EF) Junção em citação e(ou) intimação"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('ef:cpre:sistema','true')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('ef:cpre:sistema')}"/>
        </event>
    </process-state>
    <node name="(EF) Lançar movimento de Expedição Outros documentos">
        <transition to="(EF) Controlar prazos via sistema" name="(EF) Controlar prazos via sistema"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('ef:lanc:citar_intimar_reativacao') ? '(EF) Intimação de reativação - EXPEDIR' : '(EF) Junção em Preparar Ato de Comunicação'}" name="(EF) É citação e(ou) intimação de reativação?">
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="(EF) Junção em Preparar Ato de Comunicação"/>
        <transition to="(EF) Intimação de reativação - EXPEDIR" name="(EF) Intimação de reativação - EXPEDIR"/>
    </decision>
    <task-node end-tasks="true" name="(EF) Intimação de reativação - EXPEDIR">
        <task name="(EF) Intimação de reativação - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[* Variáveis *

1. Variável: Processo_Fluxo_prepararExpediente
   Label: Intimação de reativação
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (EF) Preparar Ato de Comunicação" name="Nó de Desvio - (EF) Preparar Ato de Comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) É Mandado Reativação?" name="(EF) É Mandado Reativação?">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(EF) Junção em Preparar Ato de Comunicação" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setFrameDefaultTransition('(EF) É Mandado Reativação?')}"/>
        </event>
        <event type="task-start">
            <action expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','60,69')}"/>
        </event>
    </task-node>
    <decision expression="#{comunicacaoProcessualAction.getExpedientesMandados().size() &gt; 0 ? '(EF) Existe alguma Central de Mandados?' : '(EF) Separação em citação e(ou) intimação'}" name="(EF) É Mandado Reativação?">
        <transition to="(EF) Separação em citação e(ou) intimação" name="(EF) Separação em citação e(ou) intimação"/>
        <transition to="(EF) Existe alguma Central de Mandados?" name="(EF) Existe alguma Central de Mandados?"/>
    </decision>
    <node name="(EF) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempCitInt')}"/>
            <action name="upd" expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTempMand')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:CitIntValidaParaAss')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('sg:tjrn:MandValidoParaAss')}"/>
        </event>
    </node>
    <end-state name="Término"/>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
