<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(VCiv) Controle de audiências do CEJUSC - PERÍCIA">
    <description><![CDATA[Fluxo responsável por controlar as audiências no CEJUSC DPVAT Perícia........
        Código: VCiv_CEJUSC_AUD_PERI]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Magistrado">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('6:1469')}"/>
    </swimlane>
    <swimlane name="CEJUSC">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,5:5886,6:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,6:1469,5:1470,7:5886,7:5197')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="CEJUSC"/>
        <transition to="(CEJUSC) Limpar movimentos temporários" name="(CEJUSC) Limpar movimentos temporários"/>
    </start-state>  
    <!-- NODES -->
    <node name="(CEJUSC) Limpar movimentos temporários">
        <transition to="(CEJUSC) Verifica se existe PERÍCIA designada" name="(CEJUSC) Verifica se existe PERÍCIA designada"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('MovimentosLancadosTemporariamente')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('AgrupamentosLancadosTemporariamente')}"/>
        </event>
    </node>
    <decision expression="#{processoJudicialManager.getProximaAudienciaDesignada(tramitacaoProcessualService.recuperaProcesso()) != null &amp;&amp; processoJudicialManager.getProximaAudienciaDesignada(tramitacaoProcessualService.recuperaProcesso()).getTipoAudiencia().getIdTipoAudiencia() == 26 ? '(CEJUSC) Realizar PERÍCIA' : '(CEJUSC) Aviso PERÍCIA'}" name="(CEJUSC) Verifica se existe PERÍCIA designada">
        <transition to="(CEJUSC) Realizar PERÍCIA" name="(CEJUSC) Realizar PERÍCIA"/>
        <transition to="(CEJUSC) Aviso PERÍCIA" name="(CEJUSC) Aviso PERÍCIA"/>
    </decision>
    <task-node end-tasks="true" name="(CEJUSC) Minutar ata de PERÍCIA">
        <task name="(CEJUSC) Minutar ata de PERÍCIA" swimlane="CEJUSC">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
                <variable name="minuta_audiencia" mapped-name="textEditCombo:minuta_audiencia" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[aviso: Próxima PERÍCIA: #{processoJudicialManager.getProximaAudienciaDesignada(processoTrfHome.instance)}

minuta_audiencia: Minutar ata de PERÍCIA]]></description>
        <transition to="(CEJUSC) Informar dados da PERÍCIA" name="Informar dados da PERÍCIA"/>
        <transition to="(CEJUSC) Apagar minuta em elaboração" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:fluxo:audienciaSelecionada', processoJudicialManager.getProximaAudienciaDesignada(tramitacaoProcessualService.recuperaProcesso()))}"/>
        </event>
        <event type="node-leave">
            <action expression="#{not empty processoHome.idProcessoDocumento ? org.jboss.seam.bpm.processInstance.contextInstance.setVariable('minutaEmElaboracao', processoHome.idProcessoDocumento) : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('aviso')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('minutaEmElaboracao', tramitacaoProcessualService.recuperaVariavelTarefa('textEditCombo:minuta_audiencia'))}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Cancelar e sair da tarefa')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','87,164')}"/>
        </event>
    </task-node>
    <node name="(CEJUSC) Apagar minuta em elaboração">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{documentoJudicialService.removerDocumentoAPartirDeVariavalDeFluxo('minuta_audiencia')}"/>
        </event>
    </node>
    <task-node end-tasks="true" name="(CEJUSC) Realizar PERÍCIA">
        <task name="(CEJUSC) Realizar PERÍCIA" swimlane="CEJUSC"/>
        <transition to="(CEJUSC) Minutar ata de PERÍCIA" name="Minutar ata de PERÍCIA"/>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
        <transition to="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos','Cancelar e sair da tarefa')}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Informar dados da PERÍCIA">
        <task name="(CEJUSC) Informar dados da PERÍCIA" swimlane="CEJUSC">
            <controller>
                <variable name="aviso1" mapped-name="textAlert:aviso1" access="read,write"/>
                <variable name="ProcessoAudiencia_informarDadosAudiencia" mapped-name="frame:ProcessoAudiencia_informarDadosAudiencia" access="read,write"/>
                <variable name="aviso2" mapped-name="textAlert:aviso2" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[aviso1: Perícia: #{processoJudicialManager.getProximaAudienciaDesignada(processoTrfHome.instance)}

ProcessoAudiencia_informarDadosAudiencia: Informar dados da PERÍCIA

aviso2: ATENÇÃO: É necessário SEMPRE clicar no botão "GRAVAR" após preencher os dados da PERÍCIA.]]></description>
        <transition to="(CEJUSC) Preencheu dados PERÍCIA - conciliador?" name="Encaminhar para assinatura do conciliador"/>
        <transition to="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{taskInstanceUtil.setVariable('mostrarBotaoGravarNoFluxo', 'false')}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('pje:fluxo:audienciaSelecionada') eq null ? tramitacaoProcessualService.gravaVariavel('pje:fluxo:audienciaSelecionada',processoJudicialManager.getProximaAudienciaDesignada(processoTrfHome.instance)) : ''}"/>
            <action name="Condicao do lancamento temporario de movimentos" expression="#{lancadorMovimentosService.setCondicaoLancamentoMovimentosTemporarioNoFluxo('#{false}')}"/>
            <action expression="#{authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;NATAL&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 105) :       (authenticator.getUsuarioLocalizacaoAtual().toString().toUpperCase().contains(&quot;MOSSOR&quot;) ? tramitacaoProcessualService.gravaVariavelTarefa('pje:tjrn:idOrgaoJulgador', 99) : null)}"/>
        </event>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador">
        <task name="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador" swimlane="CEJUSC">
            <controller>
                <variable name="Processo_Fluxo_revisarMinuta" mapped-name="frame:Processo_Fluxo_revisarMinuta" access="read,write"/>
                <variable name="AssinaturaEmLote" mapped-name="assinarLote:AssinaturaEmLote" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Processo_Fluxo_revisarMinuta: Assinar ata de PERÍCIA pelo conciliador]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Documento já assinado">
            <condition expression="#{not empty revisarMinutaAction.processoDocumento.processoDocumentoBin.signatarios and revisarMinutaAction.processoDocumento.ativo}"/>
        </transition>
        <transition to="(CEJUSC) Minutar ata de PERÍCIA" name="Retornar para minuta"/>
        <transition to="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
            <condition expression="#{true}"/>
        </transition>
        <event type="node-leave">
            <action expression="#{processoAudienciaHome.instance.setStatusAudiencia(tramitacaoProcessualService.recuperaVariavel('pje:fluxo:statusAudienciaSelecionada'))}"/>
            <action expression="#{processoAudienciaHome.update()}"/>
            <action expression="#{processoAudienciaHome.registrarMovimentoAudiencia()}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:statusAudienciaSelecionada')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pje:fluxo:audienciaSelecionada')}"/>
        </event>
        <event type="task-start">
            <action name="upd" expression="#{taskInstanceUtil.setVariable('tiposDisponiveisIds','87,164')}"/>
            <action name="upd" expression="#{taskInstanceUtil.setFrameDefaultTransition('Término')}"/>
        </event>
    </task-node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('minutaEmElaboracao')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('textEditCombo:minuta_audiencia')}"/>
        </event>
    </end-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:fluxo:statusAudienciaSelecionada') != null ? '(CEJUSC) Assinar ata de PERÍCIA pelo conciliador' : '(CEJUSC) Informar dados da PERÍCIA'}" name="(CEJUSC) Preencheu dados PERÍCIA - conciliador?">
        <transition to="(CEJUSC) Informar dados da PERÍCIA" name="(CEJUSC) Informar dados da PERÍCIA"/>
        <transition to="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador" name="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador"/>
    </decision>
    <task-node end-tasks="true" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
        <task name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" swimlane="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA"/>
        <transition to="(CEJUSC) Minutar ata de PERÍCIA" name="(CEJUSC) Minutar ata de PERÍCIA"/>
        <transition to="(CEJUSC) Realizar PERÍCIA" name="(CEJUSC) Realizar PERÍCIA"/>
        <transition to="(CEJUSC) Informar dados da PERÍCIA" name="(CEJUSC) Informar dados da PERÍCIA"/>
        <transition to="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador" name="(CEJUSC) Assinar ata de PERÍCIA pelo conciliador"/>
        <transition to="Término" name="Término"/>
        <transition to="(CEJUSC) Aviso PERÍCIA" name="(CEJUSC) Aviso PERÍCIA"/>
    </task-node>
    <task-node end-tasks="true" name="(CEJUSC) Aviso PERÍCIA">
        <task name="(CEJUSC) Aviso PERÍCIA" swimlane="CEJUSC">
            <controller>
                <variable name="aviso" mapped-name="textAlert:aviso" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[Variáveis:

aviso: "Não há perícia designada para o processo!"]]></description>
        <transition to="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA" name="Nó de Desvio - (VCiv) Controle de audiências do CEJUSC - PERÍCIA">
            <condition expression="#{true}"/>
        </transition>
        <transition to="Término" name="Cancelar e sair da tarefa"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
