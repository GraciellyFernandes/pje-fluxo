<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(RPP) Fluxo básico geral">
    <description><![CDATA[Código do fluxo: CPP_FBG

Descrição: Fluxo de entrada de processos do CEJUSC Pré-processual..]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (RPP) Fluxo básico geral">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('-1:1338,1342:1469')}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338')}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial"/>
        <transition to="(RPP) Autos recebidos da autuação - ANALISAR" name="(RPP) Autos recebidos da autuação - ANALISAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(RPP) Autos recebidos da autuação - ANALISAR">
        <task name="(RPP) Autos recebidos da autuação - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="movimentarLote" mapped-name="movimentarLote:movimentarLote" access="read,write"/>
            </controller>
        </task>
        <transition to="(RPP) Existe audiência pendente?" name="Prosseguir"/>
        <transition to="Nó de Desvio - (RPP) Fluxo básico geral" name="Nó de Desvio - (RPP) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.acrescentarSituacao('jus:andamento')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <decision expression="#{processoAudienciaHome.existeAudienciaPendenteProcesso() ? '(RPP) Subfluxo Preparar carta convite' : '(RPP) Sinalizar designar audiência'}" name="(RPP) Existe audiência pendente?">
        <transition to="(RPP) Subfluxo de preparação de carta convite" name="(RPP) Subfluxo Preparação de carta convite"/>
        <transition to="(RPP) Sinalizar designar audiência" name="(RPP) Sinalizar designar audiência"/>
    </decision>
    <node name="(RPP) Sinalizar designar audiência">
        <transition to="(RPP) Subfluxo Controle de audência" name="(RPP) Subfluxo Controle de audência"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pje:tjrn:cpp:sinalizacao', 'designarAudiencia')}"/>
        </event>
    </node>
    <process-state name="(RPP) Subfluxo Controle de audência">
        <sub-process name="(RPP) Fluxo de controle de audiência" binding="late"/>
        <transition to="(RPP) Evolução de classe foi realizada?" name="(RPP) Evolução de classe foi realizada?"/>
    </process-state>
    <decision expression="#{tramitacaoProcessualService.recuperaVariavel('pje:tjrn:cpp:sinalizacao') == 'evolucaoClasseConfirmada' ? 'Término' : '(RPP) Secretaria - ANALISAR'}" name="(RPP) Evolução de classe foi realizada?">
        <transition to="(RPP) Secretaria - ANALISAR" name="(RPP) Secretaria - ANALISAR"/>
        <transition to="Término" name="Término"/>
    </decision>
    <process-state name="(RPP) Subfluxo de preparação de carta convite">
        <sub-process name="(RPP) Fluxo de preparação de carta convite" binding="late"/>
        <transition to="(RPP) Secretaria - ANALISAR" name="(RPP) Secretaria - ANALISAR"/>
    </process-state>
    <task-node end-tasks="true" name="(RPP) Secretaria - ANALISAR">
        <task name="(RPP) Secretaria - ANALISAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_visualizarDecisao" mapped-name="frame:Processo_Fluxo_visualizarDecisao" access="read,write"/>
            </controller>
        </task>
        <transition to="(RPP) Subfluxo Controle de audência" name="Controlar audiência"/>
        <transition to="(RPP) Subfluxo de preparação de carta convite" name="Preparar carta convite"/>
        <transition to="Nó de Desvio - (RPP) Fluxo básico geral" name="Nó de Desvio - (RPP) Fluxo básico geral">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(RPP) Subfluxo Arquivamento" name="Arquivar processo"/>
        <transition to="(RPP) Fluxo de evolução de classe" name="Evolução de classe"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
        </event>
    </task-node>
    <process-state name="(RPP) Subfluxo Arquivamento">
        <sub-process name="(RPP) Fluxo de arquivamento" binding="late"/>
        <transition to="(RPP) Secretaria - ANALISAR" name="(RPP) Secretaria - ANALISAR"/>
    </process-state>
    <process-state name="(RPP) Fluxo de evolução de classe">
        <sub-process name="(RPP) Fluxo de evolução de classe" binding="late"/>
        <transition to="(RPP) Evolução de classe foi realizada?" name="(RPP) Evolução de classe foi realizada?"/>
    </process-state>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (RPP) Fluxo básico geral">
        <task name="Nó de Desvio - (RPP) Fluxo básico geral" swimlane="Nó de Desvio - (RPP) Fluxo básico geral"/>
        <transition to="Término" name="Término"/>
        <transition to="(RPP) Autos recebidos da autuação - ANALISAR" name="(RPP) Autos recebidos da autuação - ANALISAR"/>
        <transition to="(RPP) Secretaria - ANALISAR" name="(RPP) Secretaria - ANALISAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
