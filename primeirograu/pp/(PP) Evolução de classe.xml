<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(PP) Evolução de classe">
    <description><![CDATA[Código do fluxo: PP_EVOL_CLAS

Descrição: Fluxo responsável pela evolução das classes judiciais.

Raia        Localização              Papel
Secretaria  Secretaria               Chefe de Secretaria
            Gabinete                 Magistrado
            Assessoria               Assessor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (PP) Evolução de classe">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,7:5197,6:1469')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(PP) Evolução de classe - EFETUAR" name="(PP) Evolução de classe - EFETUAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(PP) Evolução de classe - EFETUAR">
        <task name="(PP) Evolução de classe - EFETUAR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_abaEvolucaoClasse" mapped-name="frame:Processo_Fluxo_abaEvolucaoClasse" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_abaEvolucaoClasse
   Label:
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Término" name="Término">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(PP) Cancelar evolução" name="Cancelar"/>
        <transition to="Nó de Desvio - (PP) Evolução de classe" name="Nó de Desvio - (PP) Evolução de classe">
            <condition expression="#{true}"/>
        </transition>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', 'Término')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('mostrarBotaoGravarNoFluxo', false)}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos', 'Cancelar')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pp:evolucao:efetuada', true)}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('mostrarBotaoGravarNoFluxo')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('pje:fluxo:transicao:dispensaRequeridos')}"/>
        </event>
    </task-node>
    <node name="(PP) Cancelar evolução">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pp:evolucao:cancelada', true)}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pp:evolucao:efetuada')}"/>
        </event>
    </node>
    <end-state name="Término">
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.recuperaVariavel('pp:evolucao:efetuada') == true ? preencherMovimento.deCodigo(10966).comComplementoDeCodigo(31).doTipoDinamico().preencherComObjeto(processoTrfHome.getClasseJudicialAnterior()).comComplementoDeCodigo(32).doTipoDinamico().preencherComObjeto(processoHistoricoClasseHome.instance.getClasseJudicialAtual()).lancarMovimento() : ''}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pp:evolucao:efetuada')}"/>
        </event>
    </end-state>
    <task-node end-tasks="true" name="Nó de Desvio - (PP) Evolução de classe">
        <task name="Nó de Desvio - (PP) Evolução de classe" swimlane="Nó de Desvio - (PP) Evolução de classe"/>
        <transition to="Término" name="Término"/>
        <transition to="(PP) Evolução de classe - EFETUAR" name="(PP) Evolução de classe - EFETUAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
