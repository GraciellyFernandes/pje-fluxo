<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(PP) Preparar ato de comunicação">
    <description><![CDATA[Código do fluxo: PP_PAC

Descrição: Preparar ato de comunicação como intimações via correios, sistema e edital.

Raia        Localização              Papel
Secretaria  Secretaria               Chefe de Secretaria
            Gabinete                 Magistrado
            Assessoria               Assessor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (PP) Preparar ato de comunicação">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,6:1469,7:5197')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(PP) Intimação - EXPEDIR" name="(PP) Intimação - EXPEDIR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(PP) Intimação - EXPEDIR">
        <task name="(PP) Intimação - EXPEDIR" swimlane="Secretaria">
            <controller>
                <variable name="Processo_Fluxo_prepararExpediente" mapped-name="frame:Processo_Fluxo_prepararExpediente" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variáveis*

1. Variável: Processo_Fluxo_prepararExpediente
   Label: 
   Escrita: Sim
   Obrig.: Não
   Tipo: Frame]]></description>
        <transition to="Nó de Desvio - (PP) Preparar ato de comunicação" name="Nó de Desvio - (PP) Preparar ato de comunicação">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(PP) Registrar ciência após expedição" name="(PP) Registrar ciência após expedição">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(PP) Gravar variável de cancelamento de intimação" name="Cancelar e sair da tarefa"/>
        <event type="task-create">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('frameDefaultLeavingTransition', '(PP) Registrar ciência após expedição')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '60')}"/>
            <action name="upd" expression="#{preparaAtoComunicacaoAction.setMeiosComunicacao('S,T')}"/>
        </event>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('frameDefaultLeavingTransition')}"/>
            <action expression="#{tramitacaoProcessualService.gravaVariavel('idTaskInstanceTemp', org.jboss.seam.bpm.taskInstance.getId())}"/>
        </event>
    </task-node>
    <node name="(PP) Registrar ciência após expedição">
        <transition to="(PP) Lançar movimento de expedição de outros documentos" name="(PP) Lançar movimento de expedição de outros documentos"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.registrarCienciaExpedientePessoal()}"/>
        </event>
    </node>
    <node name="(PP) Lançar movimento de expedição de outros documentos">
        <transition to="(PP) Controle de prazo de intimação expedida" name="(PP) Controle de prazo de intimação expedida"/>
        <event type="node-enter">
            <action expression="#{comunicacaoProcessualAction.enviarExpedientesLancarMovimentos('E', 'processoExpedienteAtual','#{preencherMovimento.deCodigo(60).associarAoDocumento(processoExpedienteAtual.getProcessoDocumento()).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(80).lancarMovimento()}')}"/>
        </event>
    </node>
    <process-state name="(PP) Controle de prazo de intimação expedida">
        <sub-process name="(PP) Controle de prazos" binding="late"/>
        <transition to="(PP) Apagar variáveis do fluxo" name="(PP) Apagar variáveis do fluxo"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pp:contprazos:intimacao_generica', true)}"/>
        </event>
        <event type="node-leave">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('pp:contprazos:intimacao_generica')}"/>
        </event>
    </process-state>
    <node name="(PP) Gravar variável de cancelamento de intimação">
        <transition to="(PP) Apagar variáveis do fluxo" name="(PP) Apagar variáveis do fluxo"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.gravaVariavel('pp:intimacao:cancelada', true)}"/>
        </event>
    </node>
    <node name="(PP) Apagar variáveis do fluxo">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:meiosComunicacoes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradorias'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaProcuradoriaSelecionada'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaIntimacaoPessoal'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaUmExpedientePorEndereco'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaInstrumento'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaExpedientes'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('prepararAto:mapaAgrupamentos'.concat(tramitacaoProcessualService.recuperaVariavel('idTaskInstanceTemp')))}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('variavelErrosConectorEct')}"/>
            <action expression="#{tramitacaoProcessualService.apagaVariavel('idTaskInstanceTemp')}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (PP) Preparar ato de comunicação">
        <task name="Nó de Desvio - (PP) Preparar ato de comunicação" swimlane="Nó de Desvio - (PP) Preparar ato de comunicação"/>
        <transition to="Término" name="Término"/>
        <transition to="(PP) Intimação - EXPEDIR" name="(PP) Intimação - EXPEDIR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>  
    <!-- ACTIONS --> 
</process-definition>
