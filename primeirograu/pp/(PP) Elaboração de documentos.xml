<?xml version="1.0" encoding="ISO-8859-1"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.2" name="(PP) Elaboração de documentos">
    <description><![CDATA[Código do fluxo: PP_ELABDOC

Descrição: Fluxo destinado à elaboração de documentos dos procedimentos prévios.

Raia        Localização              Papel
Secretaria  Secretaria               Chefe de Secretaria
            Gabinete                 Magistrado
            Assessoria               Assessor]]></description>  
    <!-- SWIMLANES -->
    <swimlane name="Nó de Desvio - (PP) Elaboração de documentos">
        <assignment actor-id="#{actor.id}"/>
    </swimlane>
    <swimlane name="Secretaria">
        <assignment pooled-actors="#{localizacaoAssignment.getPooledActors('5:1338,7:5197,6:1469')}" actor-id="#{actor.id}"/>
    </swimlane>  
    <!-- START-STATE -->
    <start-state name="Início">
        <task name="Tarefa inicial" swimlane="Secretaria"/>
        <transition to="(PP) Termo de audiência - ELABORAR" name="(PP) Termo de audiência - ELABORAR"/>
    </start-state>  
    <!-- NODES -->
    <task-node end-tasks="true" name="(PP) Termo de audiência - ELABORAR">
        <task name="(PP) Termo de audiência - ELABORAR" swimlane="Secretaria">
            <controller>
                <variable name="termo_audiencia" mapped-name="textEditSignature:termo_audiencia" access="read,write"/>
            </controller>
        </task>
        <description><![CDATA[*Variaveis*

1. Variável: termo_audiencia
   Label: Elaborar termo de audiência
   Escrita: Sim
   Obrig. Não
   Tipo: Editor com assinatura]]></description>
        <transition to="Nó de Desvio - (PP) Elaboração de documentos" name="Nó de Desvio - (PP) Elaboração de documentos">
            <condition expression="#{true}"/>
        </transition>
        <transition to="(PP) Lançar movimento de juntada de termo de audiência" name="(PP) Lançar movimento de juntada de termo de audiência"/>
        <event type="task-end">
            <action expression="#{tramitacaoProcessualService.apagaVariavelTarefa('tiposDisponiveisIds')}"/>
        </event>
        <event type="task-start">
            <action expression="#{tramitacaoProcessualService.gravaVariavelTarefa('tiposDisponiveisIds', '87')}"/>
        </event>
    </task-node>
    <node name="(PP) Lançar movimento de juntada de termo de audiência">
        <transition to="Término" name="Término"/>
        <event type="node-enter">
            <action expression="#{preencherMovimento.deCodigo(581).associarAoDocumento(documentoJudicialService.getDocumento(tramitacaoProcessualService.recuperaVariavel('termo_audiencia'))).comComplementoDeCodigo(4).doTipoDominio().preencherComElementoDeCodigo(100002).lancarMovimento()}"/>
        </event>
    </node>
    <end-state name="Término"/>
    <task-node end-tasks="true" name="Nó de Desvio - (PP) Elaboração de documentos">
        <task name="Nó de Desvio - (PP) Elaboração de documentos" swimlane="Nó de Desvio - (PP) Elaboração de documentos"/>
        <transition to="Término" name="Término"/>
        <transition to="(PP) Termo de audiência - ELABORAR" name="(PP) Termo de audiência - ELABORAR"/>
    </task-node>  
    <!-- PROCESS-EVENTS -->
    <event type="node-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="node-leave">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="before-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="superstate-enter">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="transition">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="process-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-end">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-start">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="subprocess-created">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="after-signal">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-assign">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="task-create">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event>
    <event type="timer">
        <script>br.com.infox.ibpm.util.JbpmEvents.raiseEvent(executionContext)</script>
    </event> 
</process-definition>
